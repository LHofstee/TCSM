[
["index.html", "Theory Construction and Statistical Modeling A guide to structural equation modeling in R Course", " Theory Construction and Statistical Modeling A guide to structural equation modeling in R Caspar J. van Lissa¹ ¹Utrecht University, Methodology &amp; Statistics Course In this course you will learn how to translate a social scientific theory into a statistical model, how to analyze your data with these models, and how to interpret and report your results following APA standards. The analyses will be executed using the statistical programming environment R, and in particular using the structural equation modeling package lavaan. "],
["preparing-for-the-course.html", "Chapter 1 Preparing for the course", " Chapter 1 Preparing for the course "],
["installing-software.html", "1.1 Installing software", " 1.1 Installing software Before we start the course, we have to install three things: R, a free program for statistical programming RStudio, a user interface which makes it easier to work with R; overlook our data, packages and output. Several packages, which are ‘add-ons’ for R with functions to do specific analyses. They also include the documentation (help files) that describes how to use them, and sample data. This Chapter shows how you can install RStudio on your computer. We’ll also provide some general information on R, and how you can get help if you get error messages. If you already have RStudio installed on your computer, and if you’re an experienced R user already, all of this might be nothing new for you. You may skip this chapter then. If you have never used R before, this Chapter is essential, as it gives you some input on how R works, and how we can use it for our data analyses. 1.1.1 1. Installing R You will have to install the latest R Version, which is available here. 1.1.2 2. Installing RStudio Download RStudio on the RStudio Website (Link). It’s free! 1.1.3 3. Installing packages As a prerequisite for this guide, you need to have a few essential R packages installed. Open RStudio Inside RStudio, find the window named Console on the bottom left corner of your screen (it might fill the entire left side of the screen). We will now install a few packages using R Code. Here’s an overview of the packages, and why we need them: Package Description lavaan A sophisticated and user-friendly package for structural equation modeling psych A package with convenience functions for screening data, computing scale scores, calculating reliability, etc ggplot2 A flexible and user-friendly package for making graphs 4. To install these packages, we use the install.packages() function in R. One package after another, our code should look like this: install.packages(&quot;lavaan&quot;) install.packages(&quot;psych&quot;) install.packages(&quot;ggplot2&quot;) Don’t forget to put the package names in &quot;&quot;. Otherwise, you will get an error message. 1.1.4 Get started 1.1.5 Starting a new project in Rstudio To keep all your work organized, you should use a project. In Rstudio, click File &gt; New Project &gt; New directory &gt; New project. Type the desired directory name in the dialog (give it a meaningful name, e.g. “My Meta-Analysis”), and use ‘Browse’ if you need to change the directory where you store your projects. Now, in your project, click File &gt; New file &gt; R script. This script file works just like notepad, or the syntax editor in SPSS: You type plain text, but you can run it any time you want. Conduct all of the exercises in this script file. 1.1.6 Code conventions Throughout the guide, a consistent set of conventions is used to refer to code: Functions are in a code font and followed by parentheses, like sum() or mean(). Other R objects (like data or function arguments) are in a code font, without parentheses, like seTE or method.tau. Sometimes, we’ll use the package name followed by two colons, like lavaan::sem(). This is valid R code and will run. The lavaan:: part indicates that the function sem() comes from the package lavaan. 1.1.7 Getting Help As you start to apply the techniques described in this guide to your data you will soon find questions that the guide does not answer. This section describes a few tips on how to get help. Every function in R has documentation (a help file). To see it, select the name of the function and press F1, or run the command ? followed by the name of the function, e.g.: ?aov. Andy Field, the book used for our undergraduate statistics courses (Field, Miles, and Field 2012), is also available for R. Many basic analyses are explained for R in this book. If you get stuck, start with Google. Typically, adding “R” to a search is enough to restrict it to relevant results, e.g.: “exploratory factor analysis R”. Google is particularly useful for error messages. If you get an error message and you have no idea what it means, try googling it. Chances are that someone else has been confused by it in the past, and there will be help somewhere on the web. (If the error message isn’t in English, run Sys.setenv(LANGUAGE = &quot;en&quot;) and re-run the code; you’re more likely to find help for English error messages.) If Google doesn’t help, try stackoverflow. Start by spending a little time searching for an existing answer; including [R] restricts your search to questions and answers that use R. Lastly, if you stumble upon an error (or typos!) in this guide’s text or R syntax, feel free to contact Caspar van Lissa at c.j.vanlissa@uu.nl. References "],
["getting-your-data-into-r.html", "Chapter 2 Getting your data into R", " Chapter 2 Getting your data into R This optional chapter will tell you about how you can import data in RStudio. We will also show you a few commands to manipulate data directly in R. "],
["using-r-projects.html", "2.1 Using R projects", " 2.1 Using R projects One advantage of using an R project is that the project directory is automatically set as the working directory. Just copy your data file to the folder that contains the “.Rproj” file, and you will be able to load files by name. "],
["importing-excel-files.html", "2.2 Importing Excel Files", " 2.2 Importing Excel Files One way to get Excel files directly into R is by using the XLConnect package. Install the package, and try using the readWorksheetFromFile() function to load the data, and assign it to an object called df: # Run this only once, to download and install the package: install.packages(&quot;XLConnect&quot;) # Load the package: library(XLConnect) # Read an Excel file into &#39;df&#39;: df &lt;- readWorksheetFromFile(&quot;your_file.xlsx&quot;, sheet = 1) 2.2.1 Inspect the data R does not work with a single spreadsheet (SPSS or Excel). Instead, it can keep many objects in memory. The object df is a data.frame; an object that behaves similar to a spreadsheet. To see a description of the object, look at the Environment tab in the top right of Rstudio, and click the arrow next to df. As you can see, the on the top-right pane Environment, your file is now listed as a data set in your RStudio environment. You can make a quick copy of this data set by assigning the df object to a new object. This way, you can edit one, and leave the other unchanged. Assign the object df to a new object called df_backup: df_backup &lt;- df You can also have a look at the contents of df by clicking the object in the Environment panel, or running the command head(df). "],
["importing-spss-files.html", "2.3 Importing SPSS Files", " 2.3 Importing SPSS Files SPSS files can be loaded using the foreign package. All SPSS files for this course are available on Blackboard. # Install the package, run this only once install.packages(&quot;foreign&quot;) # Load the `foreign` library library(foreign) # Read the SPSS data df &lt;- read.spss(&quot;sesam2.sav&quot;, to.data.frame = TRUE) "],
["data-manipulation-optional.html", "2.4 Data manipulation (optional)", " 2.4 Data manipulation (optional) Now that we have the Meta-Analysis data in RStudio, let’s do a few manipulations with the data. These functions might come in handy when were conducting analyses later on. Going back to the output of the str() function, we see that this also gives us details on the type of column data we have stored in our data. There a different abbreviations signifying different types of data. Abbreviation Type Description num Numerical This is all data stored as numbers (e.g. 1.02) chr Character This is all data stored as words log Logical These are variables which are binary, meaning that they signify that a condition is either TRUE or FALSE factor Factor Factors are stored as numbers, with each number signifying a different level of a variable. A possible factor of a variable might be 1 = low, 2 = medium, 3 = high 2.4.1 Converting to factors Let’s look at the variable df$VIEWCAT. This is a categorical variable, coded as a numerical one. We can have a look at this variable by typing the name of our dataset, then adding the selector $ and then adding the variable we want to have a look at. This variable is currently a numeric vector. We want it to be a factor: That’s a categorical variable. To convert this to a factor variable now, we use the factor() function. df$VIEWCAT &lt;- factor(df$VIEWCAT) We now see that the variable has been converted to a factor with the levels “1”, “2”, “3”, and “4”. We can assign different value labels as follows: df$VIEWCAT &lt;- factor(df$VIEWCAT, labels = c(&quot;Rarely&quot;, &quot;Sometimes&quot;, &quot;Regularly&quot;, &quot;Often&quot;)) 2.4.2 Selecting specific cases It may often come in handy to select certain cases for further analyses, or to exclude some studies in further analyses (e.g., if they are outliers). To do this, we can use the [] operator to index our data. Let’s say we want to get only the first 5 cases. We can select them like so: df[1:5, ] Or let’s say we only want the children younger than 36 months in the dataset. In this case, we can use boolean indexing: We create a TRUE / FALSE statement, and select the cases that are TRUE: df[df$AGE &lt; 36, ] Note that this approach can be used for any other type of data and variable. We can also use it to e.g., only select studies where VIEWCAT was equal to “Often” “typical”: df[df$VIEWCAT == &quot;Often&quot;, ] 2.4.3 Changing cell values Sometimes, even when preparing your data in EXCEL, you might want to change values in RStudio once you have imported your data. To do this, we have to select a cell in our data frame in RStudio. This can be done by adding [x,y] to our dataset name, where x signifies the number of the row we want to select, and y signifies the number of the column. To see how this works, let’s select a variable using this command first: df[8,1] ## [1] 8 We now see the 8th study in our dataframe, and the value of this study for Column 1 (participant ID) is displayed. Let’s say we had a typo in this name and want to have it changed. In this case, we have to give this exact cell a new value. df[8,1] &lt;- 1001 Let’s check if the value has changed. df[8,1] ## [1] 1001 You can also use this function to change any other type of data, including numericals and logicals. Only for characters, you have to put the values you want to insert in &quot;&quot;. "],
["week-1-home.html", "Chapter 3 Week 1 - Home", " Chapter 3 Week 1 - Home Open the data file LifeSat.sav. library(foreign) data &lt;- read.spss(&quot;LifeSat.sav&quot;, to.data.frame = TRUE) 3.0.1 Question 1.a Make a descriptives table for the variables: LifSat, educ, ChildSup, SpouSup, and age. What is the average age in the sample? And the range (youngest and oldest child)? Hint: Use library(psych); describe(); [] Click for explanation The package psych contains many functions for exploring data. Install and load the package, then use the describe() function to describe the data: library(psych) describe(data[, c(&quot;LifSat&quot;, &quot;educ&quot;, &quot;ChildSup&quot;, &quot;SpouSup&quot;, &quot;age&quot;)]) &lt;&gt; 3.0.2 Question 1.b Perform a simple regression with LifSat as the dependent variable and educ as the independent variable. Hint: The function lm() (short for linear model) conducts linear regression. The functions summary() provides relevant summary statistics for the model. It can be helpful to store the results of your analysis in an object, too. Click for explanation results &lt;- lm(LifSat ~ educ, data) summary(results) ## ## Call: ## lm(formula = LifSat ~ educ, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -43.781 -11.866 2.018 12.418 43.018 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 35.184 7.874 4.469 2.15e-05 *** ## educ 3.466 1.173 2.956 0.00392 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 17.64 on 96 degrees of freedom ## Multiple R-squared: 0.08344, Adjusted R-squared: 0.0739 ## F-statistic: 8.74 on 1 and 96 DF, p-value: 0.003918 &lt;&gt; 3.0.3 Question 1.c. Do the same with age as the independent variable. Click for explanation results &lt;- lm(LifSat ~ age, data) summary(results) ## ## Call: ## lm(formula = LifSat ~ age, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -35.321 -14.184 3.192 13.593 40.626 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 200.2302 52.1385 3.840 0.00022 *** ## age -2.0265 0.7417 -2.732 0.00749 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 17.75 on 96 degrees of freedom ## Multiple R-squared: 0.07215, Adjusted R-squared: 0.06249 ## F-statistic: 7.465 on 1 and 96 DF, p-value: 0.007487 &lt;&gt; 3.0.4 Question 1.d. Again with ChildSup as the independent variable. Click for explanation results &lt;- lm(LifSat ~ ChildSup, data) summary(results) ## ## Call: ## lm(formula = LifSat ~ ChildSup, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -37.32 -12.14 0.66 12.41 44.68 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 37.559 8.342 4.502 1.89e-05 *** ## ChildSup 2.960 1.188 2.492 0.0144 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 17.86 on 96 degrees of freedom ## Multiple R-squared: 0.06076, Adjusted R-squared: 0.05098 ## F-statistic: 6.211 on 1 and 96 DF, p-value: 0.01441 &lt;&gt; 3.0.5 Question 1.e. Perform a multiple regression with LifSat as the dependent variable and educ, age and ChildSup as the independent variables. Hint: You can use the + sign to add multiple variables to a model. Click for explanation results &lt;- lm(LifSat ~ educ + age + ChildSup, data) summary(results) ## ## Call: ## lm(formula = LifSat ~ educ + age + ChildSup, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -32.98 -12.56 2.68 11.03 41.91 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 134.9801 53.2798 2.533 0.0130 * ## educ 2.8171 1.1436 2.463 0.0156 * ## age -1.5952 0.7188 -2.219 0.0289 * ## ChildSup 2.4092 1.1361 2.121 0.0366 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 16.92 on 94 degrees of freedom ## Multiple R-squared: 0.1741, Adjusted R-squared: 0.1477 ## F-statistic: 6.603 on 3 and 94 DF, p-value: 0.0004254 &lt;&gt; 3.0.6 Question 1.f. Compare the results under 1.e with those obtained under 1.b-1.d. What do you notice when you compare the regression parameter for each of the three predictors in the multiple regression with the corresponding regression parameters obtained in the simple regressions? "],
["week-1-class.html", "Chapter 4 Week 1 - Class", " Chapter 4 Week 1 - Class During the practical you will work on some exercises about ANOVA and ANCOVA using regression and path modeling. Note that ANOVA and ANCOVA are special cases of regression, as discussed during MTS3 or a similar course. How to perform an ANOVA/ANCOVA as a regression analysis is prerequisite knowledge. This practical we will work on these topics (ANOVA, ANCOVA, regression and how they are related). If you need to refresh your knowledge you could use the internet to find information or you could look it up in a book on statistics, for example Field, Miles, and Field (2012) (The chapters on ANOVA, Factorial ANOVA, and ANCOVA (11.6)). We start with two exercises in which you have to explore your data and perform a regression analysis, ANOVA and an ANCOVA. You will also practice with performing an ANCOVA as a regression analysis in exercise 3 today. References "],
["loading-data.html", "4.1 Loading data", " 4.1 Loading data Open the file Sesam.sav: # Library for reading SPSS files: library(foreign) # Load the data and put them in the object called &quot;data&quot; data &lt;- read.spss(&quot;sesam.sav&quot;, to.data.frame = TRUE, use.value.labels = FALSE) This file is part of a larger dataset that evaluates the impact of the first year of the Sesame Street television series. Sesame Street is mainly concerned with teaching preschool related skills to children in the 3-5 year age range. The following variables will be used in this exercise: age measured in months prelet knowledge of letters before watching Sesame Street (range 0-58) prenumb knowledge of numbers before watching Sesame Street (range 0-54) prerelat knowledge of relations before watching Sesame Street (range 0-17) peabody vocabulary maturity before watching Sesame Street (range 20-120) postnumb knowledge of numbers after a year of Sesame Street (range 0-54) "],
["section-1.html", "4.2 Section 1", " 4.2 Section 1 4.2.1 Question 1.a What is the level of measurement of each of the variables? Click for explanation In the ‘Environment’ panel in the top right corner of the screen, click the arrow in the next to the object called ‘data’. Alternatively, run the rode: head(data). 4.2.2 Question 1.b What is the average age in the sample? And the range (youngest and oldest child)? Hint: Use install.packages(“psych”); library(psych); describe() Click for explanation The package psych contains many functions for exploring data. Install and load the package, then use the describe() function to describe the data: install.packages(&quot;psych&quot;) library(psych) describe(data) &lt;&gt; 4.2.3 Question 1.c What is the average gain in knowledge of numbers? Provide both the mean and the standard deviation. Hint: Use the &lt;- operator to assign to a new variable in data. Functions mean() and sd(). Click for explanation Create a new variable that represents the difference between pre- and post-test scores: data$dif &lt;- data$postnumb - data$prenumb There are specialized functions to obtain the mean and sd: mean(data$dif) ## [1] 9.158333 sd(data$dif) ## [1] 9.682401 &lt;&gt; 4.2.4 Question 1.d Choose an appropriate graph to present the gain scores. What did you choose and why? Hint: Several useful plotting functions for univariate distributions are: hist(); plot(density()); boxplot() Click for explanation plot(density(data$dif)) &lt;&gt; 4.2.5 Question 1.e Can you think of a graph based on two variables that is informative? What is it and how is it informative? Hint: A useful plotting function for a bivariate distribution is the scatterplot: plot(data$x, data$y) Click for explanation #Possible variables would be the pre- and post measurement plot(data$prenumb, data$postnumb) &lt;&gt; 4.2.6 Question 1.f Which of the variables age, prelet, prenumb, prerelat and peabody are significantly related to postnumb? Use Pearson’s correlations (cor()). You don’t need to check assumptions. Hint: The function cor() provides Pearson’s correlations. Select variables by name from a data.frame object (like data*) using the following syntax: Click for explanation cor(data[, c(&quot;age&quot;, &quot;prelet&quot;, &quot;prenumb&quot;, &quot;prerelat&quot;, &quot;peabody&quot;, &quot;postnumb&quot;)]) ## age prelet prenumb prerelat peabody postnumb ## age 1.0000000 0.3278806 0.4328262 0.4422787 0.2939283 0.3410578 ## prelet 0.3278806 1.0000000 0.7173013 0.4712200 0.3958917 0.5038464 ## prenumb 0.4328262 0.7173013 1.0000000 0.7175289 0.6141059 0.6755051 ## prerelat 0.4422787 0.4712200 0.7175289 1.0000000 0.5551258 0.5433818 ## peabody 0.2939283 0.3958917 0.6141059 0.5551258 1.0000000 0.5201280 ## postnumb 0.3410578 0.5038464 0.6755051 0.5433818 0.5201280 1.0000000 The use of data[,] follows the conventions of matrix indexation: You can select rows (the horizontal lines) like this, data[i, ], and columns (the vertical lines) like this, data[ ,j], where i are the rows and j are the columns you want to select. As you can see in the example, you can select multiple columns using c( … , … ). &lt;&gt; 4.2.7 Question 1.g Can age and prenumb be used to predict postnumb? If so, discuss the substantial importance of the model and the significance and substantial importance of the separate predictors. Hint: The function lm() (short for linear model) conducts linear regression. The functions summary() provides relevant summary statistics for the model. It can be helpful to store the results of your analysis in an object, too. Click for explanation results &lt;- lm(formula = postnumb ~ age + prenumb, data = data) summary(results) ## ## Call: ## lm(formula = postnumb ~ age + prenumb, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -38.130 -6.456 -0.456 5.435 22.568 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 7.4242 5.1854 1.432 0.154 ## age 0.1225 0.1084 1.131 0.259 ## prenumb 0.7809 0.0637 12.259 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 9.486 on 237 degrees of freedom ## Multiple R-squared: 0.4592, Adjusted R-squared: 0.4547 ## F-statistic: 100.6 on 2 and 237 DF, p-value: &lt; 2.2e-16 &lt;&gt; 4.2.8 Question 1.h Provide the null hypotheses and the alternative hypotheses of the model in 1.g. Click for explanation The null-hypotheses of the model pertain to the variance explained: \\(\\rho^2\\) (that’s Greek letter rho, for the population value of \\(\\rho^2\\)). \\(H_0: \\rho^2 = 0\\) \\(H_a: \\rho^2 &gt; 0\\) &lt;&gt; 4.2.9 Question 1.i Consider the path model below. How many regression coefficients are estimated in this model? And how many variances? And how many covariances? How many degrees of freedom does this model have? (\\(df = N_{obs} – N_{par}\\), see slides Lecture 1). 4.2.10 Question 1.j Consider a multiple regression analysis with three continuous independent variables, tests in language, history and logic, and one continuous dependent variable, a score on a math test. We want to know whether the various tests can predict the math score. Sketch a path model for this analysis (there are examples in the lecture slides of week 1). How many regression parameters are there? How many variances could you estimate? How many covariances could you estimate? How many degrees of freedom does this model have? "],
["section-2.html", "4.3 Section 2", " 4.3 Section 2 Open the file Drivers.sav. 4.3.1 Research question 1 (ANOVA): Does talking on the phone interfere with people’s driving skills? IV: condition hand-held phone hands-free phone control DV: reaction time in milliseconds in a driver simulation test. # Load the data and put them in the object called &quot;data&quot; data &lt;- read.spss(&quot;Drivers.sav&quot;, to.data.frame = TRUE) 4.3.2 Question 2.a Perform the ANOVA. Hint: The function aov() is an alternate interface to the linear model (lm), which reports results in line with the convention of ANOVA analyses. Click for explanation results &lt;- aov(formula = RT ~ condition, data = data) summary(results) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## condition 2 103909 51954 3.072 0.0541 . ## Residuals 57 964082 16914 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 &lt;&gt; 4.3.3 Question 2.b What are the assumptions you need to check? Click for explanation We can check several assumptions: Presence of outliers Normality of residuals Homogeneity of residuals Let’s deal with them in order. 4.3.3.1 Presence of outliers: In Y-space We can check the range of the standardized (scale()) residuals for outliers in Y-space. The residuals are inside of the results object, so we can just extract them, standardize them, and get the range: range(scale(results$residuals)) ## [1] -2.483778 1.904491 What is your conclusiong about the outliers? 4.3.3.2 Normality of residuals We can check the normality of residuals using a QQplot. qqnorm(results$residuals) qqline(results$residuals) There appears to be some mild deviation from normality at the extremes. You can also test for normality with the shapiro.test(x) function: shapiro.test(results$residuals) ## ## Shapiro-Wilk normality test ## ## data: results$residuals ## W = 0.98367, p-value = 0.6013 4.3.3.3 Homogeneity of Variances The bartlett.test() function provides a parametric K-sample test of the equality of variances. This test has the same hypotheses as the Levene’s test. bartlett.test(formula = RT~condition, data = data) ## ## Bartlett test of homogeneity of variances ## ## data: RT by condition ## Bartlett&#39;s K-squared = 2.7203, df = 2, p-value = 0.2566 It can also be nice to use a paneled boxplot to visualize the distributions. For this, we will use the package ggplot2: install.packages(&quot;ggplot2&quot;) library(ggplot2) ggplot(data, aes(y = RT, group = condition)) + geom_boxplot() + theme_bw() &lt;&gt; 4.3.4 Question 2.c Explain for each of the assumptions why they are important to check. 4.3.5 Question 2.d What are your conclusions regarding the assumption checks? Klik voor meer uitleg There are no outliers in X-space, no evidence for (severe) deviations from normality of residuals, and no evidence for (severe) heteroscedasticity. 4.3.6 Question 2.e Answer the research question. Hint: Use summary() and TukeyHSD(). Click for explanation We can examine the overall F-test, which is significant: summary(results) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## condition 2 103909 51954 3.072 0.0541 . ## Residuals 57 964082 16914 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Post-hoc tests with Bonferroni correction can be obtained using TukeyHSD(results). We notice that none of these comparisons are significant. However, the research question was Does talking on the phone interfere with peoples driving skills? There are two conditions for talking on the phone. We could thus test a planned contrast of these two conditions against the control condition, instead of all possible post-hoc tests: The standard contrasts are dummy coded: contrasts(data$condition) ## hands-free control ## hand-held 0 0 ## hands-free 1 0 ## control 0 1 We can replace these with planned contrasts for “phone” vs control, and hand-held vs hands-free: contrasts(data$condition) &lt;- cbind(phoneVcontrol = c(-1, -1, 2), handVfree = c(-1, 1, 0)) results &lt;- aov(RT ~ condition, data) # Ask for the lm summary, which gives you t-tests for the planned contrasts: summary.lm(results) ## ## Call: ## aov(formula = RT ~ condition, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -317.50 -71.25 2.98 89.55 243.45 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 608.60 16.79 36.248 &lt;2e-16 *** ## conditionphoneVcontrol -27.42 11.87 -2.310 0.0245 * ## conditionhandVfree -18.47 20.56 -0.898 0.3727 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 130.1 on 57 degrees of freedom ## Multiple R-squared: 0.09729, Adjusted R-squared: 0.06562 ## F-statistic: 3.072 on 2 and 57 DF, p-value: 0.05408 &lt;&gt; 4.3.7 Research question 2 (ANCOVA): Are there differences in reaction time between the conditions when controlling for age? 4.3.8 Question 2.f What are the assumptions you need to check? Click for explanation Assumptions for ANCOVA are the same as for ANOVA (no outliers, normality of residuals, homoscedasticity). ANCOVA has the following additional assumptions: Homogeneity of regression slopes for the covariate (no interaction between factor variable and covariate) The covariate is independent of the treatment effects. I.e. there is no difference in the covariate between the groups of the independent variable. &lt;&gt; 4.3.9 Question 2.g Explain for each of the assumptions why they are important to check. 4.3.10 Question 2.h Check the assumptions of ANCOVA. Hint: Within formulas, you can use * instead of + to include interaction effects. Click for explanation 4.3.10.1 Homogeneity of regression slopes Add the interaction to the model and test whether the interaction is significant: results_age &lt;- aov(RT ~ condition + age, data) results_age_int &lt;- aov(RT ~ condition * age, data) summary(results_age_int) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## condition 2 103909 51954 4.532 0.0151 * ## age 1 320454 320454 27.955 2.3e-06 *** ## condition:age 2 24622 12311 1.074 0.3488 ## Residuals 54 619005 11463 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #Or you could use `anova()` to compare two different models anova(results_age, results_age_int) What would your conclusion be about this assumption? Click for explanation The interaction is NOT significant; no evidence for violation of the assumption. &lt;&gt; 4.3.10.2 The covariate is independent of the treatment effects results_indep &lt;- aov(age ~ condition, data) summary(results_indep) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## condition 2 137 68.55 0.659 0.521 ## Residuals 57 5926 103.97 What would your conclusion be about this assumption? Click for explanation The covariate is not significantly related to treatment effect. The assumption is met. &lt;&gt; 4.3.11 Question 2.i Answer the research question. (Do you have to include the interaction or not?) Click for explanation results &lt;- aov(formula = RT ~ condition + age, data = data) TukeyHSD(results) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = RT ~ condition + age, data = data) ## ## $condition ## diff lwr upr p adj ## hands-free-hand-held -36.95 -118.5708 44.67082 0.5242511 ## control-hand-held -100.75 -182.3708 -19.12918 0.0119407 ## control-hands-free -63.80 -145.4208 17.82082 0.1533777 The handheld-condition has a significant higher reaction time than the control condition &lt;&gt; "],
["section-3.html", "4.4 Section 3", " 4.4 Section 3 Open the file Sesam2.sav. # Load the data and put them in the object called &quot;data&quot; data &lt;- read.spss(&quot;Sesam2.sav&quot;, to.data.frame = TRUE) Use postnumb as the dependent variable in all the following analyses. 4.4.1 Question 3.a Viewcat is a factor variable, but is not coded as such in the data. Turn it into a factor. Afterwards, make sure that viewcat=1 is the reference group in the contrasts, i.e., the group that is identified by zero scores on all the associated dummy variables. Hint: Use &lt;- factor() and contrasts(). Click for explanation data$VIEWCAT &lt;- factor(data$VIEWCAT) contrasts(data$VIEWCAT) ## 2 3 4 ## 1 0 0 0 ## 2 1 0 0 ## 3 0 1 0 ## 4 0 0 1 &lt;&gt; 4.4.2 Question 3.b Perform a multiple regression analysis with just the viewcat dummies as predictors. Click for explanation results &lt;- lm(POSTNUMB ~ VIEWCAT, data) summary(results) ## ## Call: ## lm(formula = POSTNUMB ~ VIEWCAT, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -25.474 -7.942 0.240 8.526 25.240 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 18.760 2.316 8.102 8.95e-14 *** ## VIEWCAT2 9.331 2.900 3.218 0.00154 ** ## VIEWCAT3 14.714 2.777 5.298 3.49e-07 *** ## VIEWCAT4 18.032 2.809 6.419 1.24e-09 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 11.58 on 175 degrees of freedom ## Multiple R-squared: 0.2102, Adjusted R-squared: 0.1967 ## F-statistic: 15.53 on 3 and 175 DF, p-value: 5.337e-09 &lt;&gt; 4.4.3 Question 3.c What do the regression coefficients represent? How can you determine the average postnumb score for each of the viewcat categories, based on the regression parameters? 4.4.4 Question 3.d Make a coloured scatter plot with age on the x-axis and postnumb on the y-axis. Colour the dots according to the their viewcat category. How do you interpret the differences in slopes of these four fit lines? Hint: Use ggplot(); geom_point(); geom_smooth(). Within ggplot, use the aes(colour = ‘…’) to colour according to a certain variable. Click for explanation We will use ggplot again: ggplot(data, aes(x = AGE, y = POSTNUMB, colour = VIEWCAT)) + geom_point() + # For scatterplot geom_smooth(method = &quot;lm&quot;, se = FALSE) + # For regression lines theme_bw() # For a pretty theme &lt;&gt; 4.4.5 Question 3.e Add an interaction between age and viewcat to the regression analysis. Hint: An interaction is created by multiplying two variables. You can multiply with * in the formula of lm(). Click for explanation results_interaction &lt;- lm(POSTNUMB ~ VIEWCAT*AGE, data) summary(results_interaction) ## ## Call: ## lm(formula = POSTNUMB ~ VIEWCAT * AGE, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -23.8371 -8.2387 0.6158 8.7988 22.5611 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -18.7211 15.5883 -1.201 0.2314 ## VIEWCAT2 9.9741 20.6227 0.484 0.6293 ## VIEWCAT3 23.5825 19.3591 1.218 0.2248 ## VIEWCAT4 34.3969 19.3600 1.777 0.0774 . ## AGE 0.7466 0.3074 2.429 0.0162 * ## VIEWCAT2:AGE -0.0175 0.4060 -0.043 0.9657 ## VIEWCAT3:AGE -0.1930 0.3782 -0.510 0.6104 ## VIEWCAT4:AGE -0.3416 0.3770 -0.906 0.3663 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 10.99 on 171 degrees of freedom ## Multiple R-squared: 0.3046, Adjusted R-squared: 0.2762 ## F-statistic: 10.7 on 7 and 171 DF, p-value: 3.79e-11 &lt;&gt; 4.4.6 Question 3.f Perform a sequential multiple regression. Include age and viewcat as the predictors in the first analysis. Add the interaction term in the second analysis. Make sure to obtain information about the change in R-square! Hint: Use anova() to compare two regression models. Click for explanation results_main &lt;- lm(POSTNUMB ~ VIEWCAT + AGE, data) anova(results_main, results_interaction) &lt;&gt; 4.4.7 Question 3.g Sketch path models of both steps of the regression analysis (on paper). 4.4.8 Question 3.h Write down the regression equations of both steps of the sequential analysis. Click for explanation \\(Postnumb_i = b_0 + b_1D_{view2i} + b_2D_{view3i} + b_3D_{view4i} + b_4Age_i + \\epsilon_i\\) \\(Postnumb_i = b_0 + b_1D_{view2i} + b_2D_{view3i} + b_3D_{view4i} + b_4Age_i + b_5D_{view2i}Age_i + b_6D_{view3i}Age_i + b_7D_{view4i}Age_i + \\epsilon_i\\) &lt;&gt; 4.4.9 Question 3.i Write down the null hypothesis that is tested to determine whether there is an interaction between age and viewcat. Click for explanation \\(H_0: \\Delta\\rho^2 = 0\\) &lt;&gt; 4.4.10 Question 3.j Indicate for each parameter in the second regression model what it means. Also write down the regression equation for each of the four categories of viewcat separately. 4.4.11 Question 3.k What do you conclude about the interaction between age and viewcat? 4.4.12 Question 3.l Note that you can also look at this problem as an ANCOVA. What are the research question and null hypothesis in this case? Click for explanation RQ: Is there a significant difference between the marginal means of postnumb by viewcat, after controlling for age? \\(H_0:\\) After controling for age, the mans of postnumb are equal in all groups. &lt;&gt; 4.4.13 Question 3.m Perform this analysis as an ANCOVA. Hint: Add -1 to a formula to drop the intercept. Click for explanation To drop the intercept from the analysis, and estimate the marginal means for all viewcat categories, we can add -1 (minus the intercept) to the formula: results_ancov &lt;- aov(POSTNUMB~AGE+VIEWCAT-1, data) &lt;&gt; Examine the parameter estimates of the ANCOVA. What do the parameter estimates represent? Click for explanation We use summary.lm() again to obtain the parameter estimates: summary.lm(results_ancov) ## ## Call: ## aov(formula = POSTNUMB ~ AGE + VIEWCAT - 1, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -23.680 -8.003 -0.070 8.464 22.635 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## AGE 0.5750 0.1221 4.708 5.08e-06 *** ## VIEWCAT1 -10.1056 6.5091 -1.553 0.122 ## VIEWCAT2 -0.9603 6.3865 -0.150 0.881 ## VIEWCAT3 3.7546 6.4760 0.580 0.563 ## VIEWCAT4 6.8159 6.5414 1.042 0.299 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 10.94 on 174 degrees of freedom ## Multiple R-squared: 0.8973, Adjusted R-squared: 0.8943 ## F-statistic: 304 on 5 and 174 DF, p-value: &lt; 2.2e-16 The parameter estimates are the means of each VIEWCAT category when age = 0. &lt;&gt; "],
["week-2-home.html", "Chapter 5 Week 2 - Home", " Chapter 5 Week 2 - Home This exercise is based on Kestilä, Elina (2006) Is There Demand for Radical Right Populism in the Finnish Electorate? Scandinavian Political Studies 29(3),169-191 You have read and answered questions about the article in the reading questions. In this exercise, as well as in the second class practical, we will analyze these data ourselves. The data for this practical stem from the first round of the European Social Survey (ESS). This is a repeated cross-sectional survey across 32 European countries. The first round was held in 2002, and since then, subsequent rounds of data-collection are held bi- anually. More info, as well as access to all data -&gt; www.europeansocialsurvey.org. The raw, first round data can also be found on blackboard. The file is called ESSround1- a.sav. This file contains data for all respondents, but only those variables are included that you will need in this exercise. 5.0.1 Question 1.a Download the file, and import it in R. Inspect the file (no. of cases and no. of variables) to see if the file opened well. library(foreign) data &lt;- read.spss(&quot;ESSround1-a.sav&quot;, to.data.frame = TRUE) For a description of all variables in the dataset, click here! Variable Description name Title of dataset essround ESS round edition Edition proddate Production date cntry Country idno Respondent’s identification number trstlgl Trust in the legal system trstplc Trust in the police trstun Trust in the United Nations trstep Trust in the European Parliament trstprl Trust in country’s parliament stfhlth State of health services in country nowadays stfedu State of education in country nowadays stfeco How satisfied with present state of economy in country stfgov How satisfied with the national government stfdem How satisfied with the way democracy works in country pltinvt Politicians interested in votes rather than peoples opinions pltcare Politicians in general care what people like respondent think trstplt Trust in politicians imsmetn Allow many/few immigrants of same race/ethnic group as majority imdfetn Allow many/few immigrants of different race/ethnic group from majority eimrcnt Allow many/few immigrants from richer countries in Europe eimpcnt Allow many/few immigrants from poorer countries in Europe imrcntr Allow many/few immigrants from richer countries outside Europe impcntr Allow many/few immigrants from poorer countries outside Europe qfimchr Qualification for immigration: christian background qfimwht Qualification for immigration: be white imwgdwn Average wages/salaries generally brought down by immigrants imhecop Immigrants harm economic prospects of the poor more than the rich imtcjob Immigrants take jobs away in country or create new jobs imbleco Taxes and services: immigrants take out more than they put in or less imbgeco Immigration bad or good for country’s economy imueclt Country’s cultural life undermined or enriched by immigrants imwbcnt Immigrants make country worse or better place to live imwbcrm Immigrants make country’s crime problems worse or better imrsprc Richer countries should be responsible for accepting people from poorer countries pplstrd Better for a country if almost everyone share customs and traditions vrtrlg Better for a country if a variety of different religions shrrfg Country has more than its fair share of people applying refugee status rfgawrk People applying refugee status allowed to work while cases considered gvrfgap Government should be generous judging applications for refugee status rfgfrpc Most refugee applicants not in real fear of persecution own countries rfggvfn Financial support to refugee applicants while cases considered rfgbfml Granted refugees should be entitled to bring close family members gndr Gender yrbrn Year of birth edulvl Highest level of education eduyrs Years of full-time education completed polintr How interested in politics lrscale Placement on left right scale 5.0.2 Question 1.b The ESS-file contains much more information than we need to re-analyze the paper by Kestilä. We need to reduce the number of cases, in order to make the file more manageable, and make sure our results pertain to our target population. Kestilä only uses data from ten countries: c(&quot;Austria&quot;, &quot;Belgium&quot;, &quot;Denmark&quot;, &quot;Finland&quot;, &quot;France&quot;, &quot;Germany&quot;, &quot;Italy&quot;, &quot;Netherlands&quot;, &quot;Norway&quot;, &quot;Sweden&quot;). Select data from these countries by means of boolean indexing, using the %in% function. Hint: Use []; %in% Click for explanation df &lt;- data[data$cntry %in% c(&quot;Austria&quot;, &quot;Belgium&quot;, &quot;Denmark&quot;, &quot;Finland&quot;, &quot;France&quot;, &quot;Germany&quot;, &quot;Italy&quot;, &quot;Netherlands&quot;, &quot;Norway&quot;, &quot;Sweden&quot;), ] 5.0.3 Question 1.c Inspect the data file again to see whether step 1b went ok. 5.0.4 Question 1.d Before we can start the analyses, we first need to screen the data. What are the things we need to watch for? (think about your earlier statistics-courses)? Click for explanation This question is open to interpretation. One thing you might notice is that all variables the authors used are currently coded as factor variables (e.g., “Factor w/ 11 levels”): levels(df$trstlgl) ## [1] &quot;No trust at all&quot; &quot;1&quot; &quot;2&quot; ## [4] &quot;3&quot; &quot;4 &quot; &quot;5&quot; ## [7] &quot;6&quot; &quot;7&quot; &quot;8&quot; ## [10] &quot;9&quot; &quot;Complete trust&quot; In keeping with conventions, we could treat ordinal Likert scales with &gt;5 levels as continuous. We can either re-code the data, or prevent read.spss() from coding these variables as factors when it reads the data. Here is code for both approaches. 5.0.4.1 Re-coding factors to numeric Data.frames like df are (secretly) lists, where each column is an element of the list. That means we can index a data.frame as a list, not just as a matrix. We can also use the incredibly powerful lapply() function, short for list apply, which takes each list element (column), and applies a function to it. In this case, that function is as.numeric(), which turns factors into numbers: df[7:44] &lt;- lapply(df[7:44], as.numeric) table(df[,7]) ## ## 1 2 3 4 5 6 7 8 9 10 11 ## 716 434 908 1456 1634 3196 2454 3066 3266 1517 733 5.0.4.2 Reading data without coding factors An alternative solution is to stop the function read.spss() from using value labels to code variables as factors. However, we’re not going to use this right now, so the information below is merely illustrative: # The option use.value.labels = FALSE stops the function from coding factors: data &lt;- read.spss(&quot;ESSround1-a.sav&quot;, to.data.frame = TRUE, use.value.labels = FALSE) # Then, re-select the subset of data. The countries are now also unlabeled, so # we select them by number: df &lt;- data[data$cntry %in% c(21,18,17,15,9,8,6,5,2,1), ] 5.0.5 Question 1.e Screen all your variables univariately (one by one) by making frequency tables for every variable. Again, unsure how to do this? Review Field. Pay particular attention to the measurement scales of each variable. Hint: Use table(); lapply(); psych::describe() Click for explanation We can use the lapply() function from the previous question to get frequency tables for all relevant variables: lapply(df[7:44], table) ## $trstlgl ## ## 1 2 3 4 5 6 7 8 9 10 11 ## 716 434 908 1456 1634 3196 2454 3066 3266 1517 733 ## ## $trstplc ## ## 1 2 3 4 5 6 7 8 9 10 11 ## 346 255 494 855 1080 2462 2326 3637 4318 2348 1439 This is probably a bit too much detail, so we can just use the psych::describe() fuction again: psych::describe(df[7:44]) 5.0.6 Question 1.f Are there any incorrectly coded missing value labels, or other inexplicable values? 5.0.7 Question 1.g The first step in re-analyzing data is replicating the results from the paper by Kestilä. Run a Principal Component Analysis using psych::principal(), and choose the exact same specification as Kestilä concerning estimation method, rotation etc. Do two analyses: one for trust in politics, and one for attitudes towards immigration. Hint: Use psych::principal() Click for explanation There’s a convenient function for PCA in the psych package, although base R also has the function princomp(). 5.0.7.1 Trust in politics Kestilä extracted three components, with VARIMAX rotation. When we print the results, we can hide all factor loadings smaller than the smallest one in their table, to make it easier to read: library(psych) pca_trust &lt;- principal(df[, 7:19], nfactors = 3, rotate = &quot;varimax&quot;) print(pca_trust, cut = .3, digits =3) ## Principal Components Analysis ## Call: principal(r = df[, 7:19], nfactors = 3, rotate = &quot;varimax&quot;) ## Standardized loadings (pattern matrix) based upon correlation matrix ## RC3 RC2 RC1 h2 u2 com ## trstlgl 0.779 0.669 0.331 1.21 ## trstplc 0.761 0.633 0.367 1.18 ## trstun 0.675 0.556 0.444 1.44 ## trstep 0.651 0.332 0.549 0.451 1.57 ## trstprl 0.569 0.489 0.650 0.350 2.49 ## stfhlth 0.745 0.567 0.433 1.04 ## stfedu 0.750 0.603 0.397 1.14 ## stfeco 0.711 0.300 0.616 0.384 1.44 ## stfgov 0.634 0.377 0.587 0.413 1.88 ## stfdem 0.369 0.568 0.325 0.564 0.436 2.38 ## pltinvt 0.817 0.695 0.305 1.08 ## pltcare 0.811 0.695 0.305 1.11 ## trstplt 0.510 0.611 0.716 0.284 2.40 ## ## RC3 RC2 RC1 ## SS loadings 2.942 2.668 2.490 ## Proportion Var 0.226 0.205 0.192 ## Cumulative Var 0.226 0.432 0.623 ## Proportion Explained 0.363 0.329 0.307 ## Cumulative Proportion 0.363 0.693 1.000 ## ## Mean item complexity = 1.6 ## Test of the hypothesis that 3 components are sufficient. ## ## The root mean square of the residuals (RMSR) is 0.07 ## with the empirical chi square 15240.94 with prob &lt; 0 ## ## Fit based upon off diagonal values = 0.967 For attitude towards immigration, Kestilä extracted five components, with VARIMAX rotation: library(psych) pca_att &lt;- principal(df[, 20:44], nfactors = 5, rotate = &quot;varimax&quot;) print(pca_att, cut = .3) ## Principal Components Analysis ## Call: principal(r = df[, 20:44], nfactors = 5, rotate = &quot;varimax&quot;) ## Standardized loadings (pattern matrix) based upon correlation matrix ## RC2 RC1 RC5 RC3 RC4 h2 u2 com ## imsmetn 0.80 0.72 0.28 1.3 ## imdfetn 0.78 0.79 0.21 1.7 ## eimrcnt 0.83 0.71 0.29 1.1 ## eimpcnt 0.80 0.79 0.21 1.5 ## imrcntr 0.83 0.75 0.25 1.1 ## impcntr 0.78 0.78 0.22 1.6 ## qfimchr 0.82 0.70 0.30 1.1 ## qfimwht 0.76 0.65 0.35 1.3 ## imwgdwn 0.81 0.71 0.29 1.2 ## imhecop 0.75 0.67 0.33 1.4 ## imtcjob 0.57 0.34 0.48 0.52 2.0 ## imbleco 0.70 0.55 0.45 1.3 ## imbgeco 0.70 0.60 0.40 1.5 ## imueclt 0.57 -0.34 0.54 0.46 2.4 ## imwbcnt 0.67 0.63 0.37 1.9 ## imwbcrm 0.66 0.48 0.52 1.2 ## imrsprc 0.61 0.44 0.56 1.3 ## pplstrd 0.33 -0.54 0.46 0.54 2.2 ## vrtrlg -0.35 0.46 0.41 0.59 2.8 ## shrrfg 0.37 -0.35 0.42 0.58 4.1 ## rfgawrk 0.61 0.40 0.60 1.1 ## gvrfgap 0.69 0.56 0.44 1.3 ## rfgfrpc -0.39 0.33 0.67 3.3 ## rfggvfn 0.58 0.42 0.58 1.5 ## rfgbfml 0.60 0.46 0.54 1.6 ## ## RC2 RC1 RC5 RC3 RC4 ## SS loadings 4.38 3.40 2.78 2.19 1.72 ## Proportion Var 0.18 0.14 0.11 0.09 0.07 ## Cumulative Var 0.18 0.31 0.42 0.51 0.58 ## Proportion Explained 0.30 0.24 0.19 0.15 0.12 ## Cumulative Proportion 0.30 0.54 0.73 0.88 1.00 ## ## Mean item complexity = 1.7 ## Test of the hypothesis that 5 components are sufficient. ## ## The root mean square of the residuals (RMSR) is 0.05 ## with the empirical chi square 29520.06 with prob &lt; 0 ## ## Fit based upon off diagonal values = 0.98 5.0.8 Question 1.h Extract the PCA factor scores from the results objects, and add them to the data.frame. Give the PCA scores informative names, based on your interpretation of the factor loadings, so that you understand what they summarize. Hint: Use $; colnames(); cbind() Click for explanation Extracting factor scores The factor scores are INSIDE of the results objects. Use the $ operator to access them: head(pca_att$scores) ## RC2 RC1 RC5 RC3 RC4 ## 1 1.9920289 1.3140238 -0.8305392 -0.06329775 -0.08837693 ## 4 0.1708174 -1.2167781 -0.4974957 -0.23766146 0.67364069 ## 7 -0.3580985 0.3236336 -1.5094405 -0.53052720 -2.20637993 ## 14 NA NA NA NA NA ## 17 -0.1136716 -0.7869911 -1.4664715 -0.07112144 0.41078167 ## 20 -0.9188606 2.8264230 -0.3477484 -0.73788338 -1.32089442 We’re going to give these factor scores some informative names, and add them to our data.frame. You should give them different, informative names based on the meaning of the factors! # Print names colnames(pca_att$scores) ## [1] &quot;RC2&quot; &quot;RC1&quot; &quot;RC5&quot; &quot;RC3&quot; &quot;RC4&quot; # Change names colnames(pca_att$scores) &lt;- c(&quot;Att1&quot;, &quot;Att2&quot;, &quot;Att3&quot;, &quot;Att4&quot;, &quot;Att5&quot;) colnames(pca_trust$scores) &lt;- c(&quot;Trust1&quot;, &quot;Trust2&quot;, &quot;Trust3&quot;) # Add columns df &lt;- cbind(df, pca_trust$scores, pca_att$scores) 5.0.9 Question 1.i Are you able to replicate her results? Click for explanation No, probably not. 5.0.10 Question 1.j Save your syntax and bring your data and syntax to the practical on Thursday. "],
["week-2-class.html", "Chapter 6 Week 2 - Class", " Chapter 6 Week 2 - Class During this exercise, you will perform multiple factor analyses. Before you will be able to execute these, you will have to install the R-package GPArotation. install.packages(&quot;GPArotation&quot;) We might add some kind of introduction to the class exercises of week 2. "],
["loading-data-1.html", "6.1 Loading data", " 6.1 Loading data In the unlikely event that you were able to replicate the results of Kestilä, load the environment of the take-home exercise of week 2. In case you have not saved the environment, you can just load and re-run your script of the take-home exercise. If you did not manage to replicate the results, go to blackboard and download ESSround1-b.sav and load this dataset into RStudio. Click for explanation library(foreign) data &lt;- read.spss(&quot;ESSround1-b.sav&quot;, to.data.frame = TRUE) 6.1.1 Question 1 Kestilä states that running a Principal Components Analysis is a good way to test whether the survey questions in the ESS measure attitudes towards immigration and trust in politics. What would Preacher and MacCallum (2003) say about this? Click for information *Hint: If you are working in R studio, you can simply add an # before each line of your answer, so that you will have all information inside the same document, without R thinking that it will have to run the code. #Simply like #this 6.1.2 Question 2 If you would have to choose a method for constructing the ‘trust in politics’ and ‘attitude towards immigration’ scales based on the theory and background information in the Kestilä article, what type of factor analysis would you choose? Think about: Estimation method Rotation method Method to establish how many factors are needed 6.1.3 Question 3 Run two factor analyses, one for each PCA of the original article. Inspect the number of factors necessary, evaluate the rotation method, and if necessary, run the factor analysis again with adapted settings (rotation method and/or different number of factors). How many factors are there? Click for explanation First, you will have to create a new data object containing only the countries of interest in which all variables are numeric. df &lt;- data[data$cntry %in% c(&quot;Austria&quot;, &quot;Belgium&quot;, &quot;Denmark&quot;, &quot;Finland&quot;, &quot;Germany&quot;, &quot;Italy&quot;, &quot;Netherlands&quot;, &quot;Norway&quot;, &quot;Sweden&quot;), ] However, using this command, R will still see the excluded countries as factor levels, which will result into problems when you are going to replicate the study by Kestilä. To drop these factor levels completely, use the following command. df$cntry &lt;- factor(df$cntry) You also want to adjust the variables of interest to numeric once again. df[7:44] &lt;- lapply(df[7:44], as.numeric) To perform an exploratory factor analysis, you can use the function fa of the package psych. You will have to specify the data, and the variables that you want to include in the factor analyses. Furthermore, you will have to specify the number of factors that you want to extract, the rotation method and the estimation method. library(psych) library(GPArotation) efa_trust &lt;- fa(df[, 7:19], nfactors = 3, rotate = &quot;promax&quot;, fm = &quot;ml&quot;, scores = &quot;Bartlett&quot;) In order to determine the number of factors to extract, you might want to look at the eigenvalues of the factors or the scree plot. These information can be accessed by using the following code: round(efa_trust$values, digits = 3) ## [1] 5.054 0.874 0.687 0.304 0.185 0.076 0.014 0.008 -0.060 -0.078 ## [11] -0.123 -0.149 -0.191 plot(efa_trust$values, type = &quot;b&quot;) You will have to do the same for the attitude variables. library(psych) library(GPArotation) efa_att &lt;- fa(df[, 20:44], nfactors = 5, rotate = &quot;promax&quot;, fm = &quot;ml&quot;, scores = &quot;Bartlett&quot;) And for information about the number of factors, you can use the following commands. round(efa_att$values, digits = 3) ## [1] 8.016 1.702 1.051 0.697 0.500 0.389 0.218 0.162 0.091 0.046 ## [11] 0.043 0.028 0.022 0.008 -0.018 -0.028 -0.032 -0.056 -0.066 -0.083 ## [21] -0.089 -0.119 -0.132 -0.146 -0.266 plot(efa_att$values, type = &quot;b&quot;) 6.1.4 Question 4 Apart from the number of factors, you also want to look at the factor loadings. They can be found in the “pattern matrix”. The higher the factor loadings are, the more indicative an item is for the latent factor. If you find some items to have only very low loadings (indicating that the items do not provide much information about the factor), you may choose not to include them in your analysis. This means you have to rerun the analysis under question 3. Click for explanation You can find the factor loadings by means of the ‘print’-function used in the take-home exercise, or you can search for the variable ‘loadings’, which is inside the results object, to end up with just the information you are searching for. efa_trust$loadings ## ## Loadings: ## ML1 ML2 ML3 ## pltcare 0.784 -0.126 ## pltinvt 0.783 -0.131 ## trstprl 0.528 0.101 0.258 ## trstlgl 0.827 ## trstplc -0.157 0.800 ## trstplt 0.713 0.116 ## trstep 0.432 0.303 ## trstun 0.343 0.366 ## stfeco 0.128 0.725 -0.129 ## stfgov 0.270 0.640 -0.132 ## stfdem 0.201 0.479 0.129 ## stfedu -0.166 0.665 0.104 ## stfhlth -0.137 0.632 ## ## ML1 ML2 ML3 ## SS loadings 2.518 2.035 1.725 ## Proportion Var 0.194 0.157 0.133 ## Cumulative Var 0.194 0.350 0.483 efa_att$loadings ## ## Loadings: ## ML3 ML1 ML5 ML4 ML2 ## imsmetn 0.479 0.403 ## imdfetn 0.321 0.563 ## eimrcnt 1.110 -0.187 ## eimpcnt 0.345 0.665 ## imrcntr 0.798 ## impcntr 0.259 0.727 ## qfimchr 0.126 0.867 ## qfimwht 0.114 0.749 ## imwgdwn 0.511 0.182 ## imhecop 0.560 0.153 ## imtcjob 0.712 0.138 ## imbleco 0.702 0.162 ## imbgeco 0.740 ## imueclt 0.470 -0.166 -0.166 ## imwbcnt 0.639 -0.169 ## imwbcrm 0.515 -0.177 0.101 ## imrsprc 0.534 0.159 ## pplstrd 0.245 -0.365 ## vrtrlg -0.115 0.186 0.270 ## shrrfg 0.302 -0.280 ## rfgawrk 0.474 ## gvrfgap 0.752 ## rfgfrpc 0.219 -0.255 ## rfggvfn 0.489 ## rfgbfml 0.632 ## ## ML3 ML1 ML5 ML4 ML2 ## SS loadings 3.271 2.397 2.061 1.648 1.549 ## Proportion Var 0.131 0.096 0.082 0.066 0.062 ## Cumulative Var 0.131 0.227 0.309 0.375 0.437 The output above might appear slightly confusing, due to the jumble of factor loadings. To create more clarity, it is convenient to suppress the factor loadings that are lower than .30. print(efa_trust$loadings, cut = .30, digits = 2) ## ## Loadings: ## ML1 ML2 ML3 ## pltcare 0.78 ## pltinvt 0.78 ## trstprl 0.53 ## trstlgl 0.83 ## trstplc 0.80 ## trstplt 0.71 ## trstep 0.43 0.30 ## trstun 0.34 0.37 ## stfeco 0.73 ## stfgov 0.64 ## stfdem 0.48 ## stfedu 0.67 ## stfhlth 0.63 ## ## ML1 ML2 ML3 ## SS loadings 2.52 2.03 1.72 ## Proportion Var 0.19 0.16 0.13 ## Cumulative Var 0.19 0.35 0.48 Furthermore, if you want to perform a factor analysis without, say, trstep, while you want all other variables included in your factor analysis, you can simply leave the column number of trstep, which is 13, out of the command: library(psych) library(GPArotation) efa_trust_without_stfedu &lt;- fa(df[, c(7:12, 14:19)], nfactors = 3, rotate = &quot;promax&quot;, fm = &quot;ml&quot;) 6.1.5 Question 5 Give the factor scores an appropriate name. You can do this by inspecting the items that load on one factor. What do these items have in common substantively? The goal of a factor analysis usually is to create interpretable factors. If you have trouble interpreting the factors, you can choose to tweak the analysis by changing the options, or including/excluding more items. Furthermore, after you named the factor scores accordingly, extract them from the results object and add them to the data.frame. Hint: If you do not know how to do this, have a look at question 1.h from the take-home exercise of week 2. Please note that the colnames will be specified from left to right, and not, for example, from ML1 to ML5. 6.1.6 Question 6 The next step is to assert whether the items that together form one factor, also form a reliable scale. Run separate reliability analyses by means of the function alpha for the items that together form one factor, and evaluate Cronbach’s alpha to see whether the scales are internally consistent. The “Reliability if an item is dropped (alpha.drop)” information may be handy to inspect what would happen if you would delete one item; you can find it inside the reliability analysis object. If Cronbach’s alpha is not ok, deselect one survey item and run the analyses under question 4 and question 5 again. Hint: Cronbach’s alpha &gt; .7 are deemed to be ok, &gt; .8 is good. If Cronbach’s alpha is not ok, deselect one survey item and run the analyses under question 4 and question 5 again. Click for explanation If you want to assess the reliability of the variables pltcare, pltinvt, trstprl, trstplt, and trstep you can run a reliability analysis as follows. Hint: name the new objects substantively, instead of numbering them. library(psych) reli_1 &lt;- psych::alpha(df[, c(7, 8, 9, 12, 13)]) reli_1 ## ## Reliability analysis ## Call: psych::alpha(x = df[, c(7, 8, 9, 12, 13)]) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.8 0.83 0.82 0.49 4.8 0.0019 4.4 1.4 0.52 ## ## lower alpha upper 95% confidence boundaries ## 0.8 0.8 0.81 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N alpha se var.r med.r ## pltcare 0.79 0.80 0.77 0.50 4.0 0.0021 0.017 0.52 ## pltinvt 0.80 0.81 0.78 0.51 4.2 0.0021 0.016 0.53 ## trstprl 0.73 0.78 0.76 0.47 3.6 0.0027 0.018 0.52 ## trstplt 0.70 0.75 0.73 0.43 3.1 0.0031 0.014 0.43 ## trstep 0.78 0.82 0.80 0.53 4.6 0.0021 0.010 0.52 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## pltcare 17975 0.66 0.75 0.67 0.56 2.6 1.1 ## pltinvt 17971 0.64 0.74 0.65 0.54 2.4 1.1 ## trstprl 17753 0.84 0.80 0.74 0.69 6.3 2.3 ## trstplt 17966 0.88 0.86 0.83 0.77 5.3 2.2 ## trstep 16390 0.77 0.70 0.59 0.57 5.6 2.3 In the hypothetical scenario that Cronbach’s alpha increases when you drop a variable out of the analysis, you can rerun your analysis without that specific variable. So for a version without variable trstprl, see the example below. library(psych) reli_1b &lt;- psych::alpha(df[, c(7, 8, 12, 13)]) 6.1.7 Question 7 Now you can analyze the differences between the factor scores for the PCA analysis (take-home exercise 2) and the EFA by plotting them in a series of scatterplots (bivariate). This can be done by means of the package ggplot2. The PCA factor scores are already stored in the dataset ESSround1-b.sav. Click for explanation Make sure to adjust the variable names to the variables names of your own. library(ggplot2) ggplot(data = df) + geom_point(mapping = aes(x = EFA_trust1, y = PCA_Trust1)) 6.1.8 Question 8 Build correlation matrices (PCA and EFA versions) of first the ‘trust in politics’ scores, and then the ‘immigration’ factor scores. What is your conclusion: is there a difference between them? Click for explanation Hint: Name the new objects substantively once again. cor_trust_factor1 &lt;- cor(df$EFA_Trust1, df$PCA_Trust1, use = &quot;complete.obs&quot;) cor_trust_factor1 ## [1] 0.9375965 6.1.9 Question 9 Kestila uses the PCA factor scores to evaluate country level differences in 1. Attitudes towards immigration and 2. Political trust. Repeat her analyses using the factor scores you saved in step 5. Think about the statistical test you would like to use. Do you draw similar or different conclusions? Click for explanation We can use an ANOVA to test whether the countries differ in the amount of political trust the participants have. fit_ANOVA &lt;- aov(trustinstEFA ~ cntry, data = df) summary(fit_ANOVA) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## cntry 8 1740 217.55 199.6 &lt;2e-16 *** ## Residuals 14769 16100 1.09 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## 3409 observations deleted due to missingness In which trustinstEFA is the dependent variable, cntry is the grouping variable, and df is the name of the dataset; summary will provide the results. However, it will only indicate whether the variable cntry is significant or not, so you will be unable to tell which countries differ in terms of their political trust. To tell which countries differ, you can do a pairwise comparison test, with a Bonferroni adjustment for multiple testing. pair_comparison &lt;- pairwise.t.test(df$trustinstEFA, df$cntry, p.adjust.method = &quot;bonf&quot;, na.rm = TRUE) round(pair_comparison$p.value, digits = 3) ## Austria Belgium Germany Denmark Finland Italy Netherlands ## Belgium 0.000 NA NA NA NA NA NA ## Germany 0.033 0 NA NA NA NA NA ## Denmark 0.000 0 0 NA NA NA NA ## Finland 0.000 0 0 0.085 NA NA NA ## Italy 1.000 0 1 0.000 0 NA NA ## Netherlands 0.000 0 0 0.000 0 0.000 NA ## Norway 0.000 0 0 0.000 0 0.000 0 ## Sweden 0.231 0 0 0.000 0 0.144 0 ## Norway ## Belgium NA ## Germany NA ## Denmark NA ## Finland NA ## Italy NA ## Netherlands NA ## Norway NA ## Sweden 0.005 6.1.10 Question 10 The second goal of Kestilä is to show how socio-demographic characteristics affect attitudes towards immigrants and trust in politics in Finland. Select only the Finnish cases using the variable cntry. Next, run a number of multiple linear regression analyses with the (sub-)scales of attitudes towards immigrants and political trust as subsequent dependent variables, and the same predictors as Kestilä. Inspect your output. Compare your results with the results from Kestilä. How do your results differ or agree with the results by Kestilä? Click for explanation To select the Finnish cases only: df_finland &lt;- df[df$cntry %in% &quot;Finland&quot;, ] df_finland$cntry &lt;- factor(df_finland$cntry) Although we have selected the Finnish cases, we still have to do some recoding. Since not the age of the participants is listed, but the year of birth, we have to recode this variable. Due to the fact that yrbrn was originally coded as a factor, we first have to create a numerical object based on the factor labels. Since the data originated from 2002, we can simply extract the year of birth of every participant from the year 2002. The same holds for the variables eduyrs and lrscale, to prevent R from making dummies for all distinct values. df_finland$age &lt;- as.numeric(as.character(df_finland$yrbrn)) df_finland$age &lt;- (2002 - df_finland$age) df_finland$eduyrs &lt;- as.numeric(df_finland$eduyrs) df_finland$lrscale &lt;- as.numeric(df_finland$lrscale) Fortunately, R creates a dummy for the variables gndr and polintr automatically. However, if you want to run the same analysis as Kestilä, you will have to recode polintr in such a way that there are only two categories, since R will go for a solution with one dummy per category by default. After you have done the recoding, you can replicate Kestiläs analysis. df_finland$polintr_dummy &lt;- as.numeric(df_finland$polintr) df_finland$polintr_dummy &lt;- as.numeric(df_finland$polintr_dummy &lt;= 2) df_finland$polintr_dummy &lt;- factor(df_finland$polintr_dummy, levels = c(0,1), labels = c(&quot;Not or hardly interested&quot;, &quot;Quite or very interested&quot;)) fit_trust1 &lt;- lm(trustinstEFA ~ gndr + age + eduyrs + polintr_dummy + lrscale, data = df_finland, na.action = na.omit) summary(fit_trust1) ## ## Call: ## lm(formula = trustinstEFA ~ gndr + age + eduyrs + polintr_dummy + ## lrscale, data = df_finland, na.action = na.omit) ## ## Residuals: ## Min 1Q Median 3Q Max ## -4.0364 -0.4740 0.1394 0.6379 2.3394 ## ## Coefficients: ## Estimate Std. Error t value ## (Intercept) -0.169767 0.131134 -1.295 ## gndrFemale -0.010228 0.044386 -0.230 ## age -0.001053 0.001356 -0.776 ## eduyrs 0.027904 0.006277 4.445 ## polintr_dummyQuite or very interested 0.090948 0.045642 1.993 ## lrscale 0.051650 0.011037 4.680 ## Pr(&gt;|t|) ## (Intercept) 0.1956 ## gndrFemale 0.8178 ## age 0.4377 ## eduyrs 9.34e-06 *** ## polintr_dummyQuite or very interested 0.0465 * ## lrscale 3.10e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.9159 on 1734 degrees of freedom ## (260 observations deleted due to missingness) ## Multiple R-squared: 0.03377, Adjusted R-squared: 0.03099 ## F-statistic: 12.12 on 5 and 1734 DF, p-value: 1.454e-11 6.1.11 Question 11 Save your syntax and your data, you will need it next week. "],
["week-3-home.html", "Chapter 7 Week 3 - Home", " Chapter 7 Week 3 - Home Last week, you have worked on the data used by Kestilä in a paper that discussed two possible reasons why there is no Radical Right party in Finland. You have attempted to 1) replicate her study by doing a Principal Component Analysis and 2) a factor analysis (exploratory) of the same data. This week you also learned that it is possible to do Confirmatory Factor Analysis within the structural equation modeling (SEM) framework. We use the R-package lavaan to fit these kinds of models. Before we will analyze the Kestilä data, you first need to learn some of the basic principles of doing analyses using lavaan. Using syntax, you need to tell lavaan exactly what kind of model you want it to estimate This opens up many more possibilities to do Theory Construction and then subsequently test your theory using Statistical Modeling. As a preparation for the next practical, work your way through this tutorial (part of which consists of the official lavaan tutorial). You will find that lavaan is a very user-friendly software package. 7.0.1 Get started with lavaan To get started with lavaan, read and run the following two chapters of the official lavaan tutorial: Installing lavaan Lavaan syntax (you just have to read this one) 7.0.2 Regression models in lavaan Download the data file Hamilton.csv, or Hamilton.xls from blackboard. The data are as follows: Hamilton (1990) provided several measurements on each of 21 states. Three of the measurements will be used in this tutorial: Average SAT score Per capita income expressed in $1,000 units Median education for residents 25 years of age or older Load the data from the .csv or .xls file into R. Hint: Use read.csv() or XLConnect::readWorkSheetFromFile() Click for explanation library(XLConnect) df &lt;- readWorksheetFromFile(&quot;Hamilton.xls&quot;, 1) Or df &lt;- read.csv(&quot;Hamilton.csv&quot;) 7.0.3 Conceptual model The following path diagram shows a model for these data: This is a simple regression model where one observed variable, SAT, is predicted as a linear combination of the other two observed variables, Education and Income. As with nearly all empirical data, the prediction will not be perfect. The variable Other represents variables other than Education and Income that affect SAT. Each single-headed arrow represents a regression weight. The number 1 in the figure specifies that Other must have a weight of 1 in the prediction of SAT. This constraint is imposed by default in lavaan. 7.0.4 Lavaan syntax Based on the lavaan tutorial, write down (just as text) the model syntax that describes the model in the picture. How many regressions are there? How many covariances? Click for explanation The syntax for this model is: &quot;SAT ~ Income + Education Income ~~ Education&quot; Or, equivalently: &quot;SAT ~ Income SAT ~ Education Income ~~ Education&quot; This syntax specifies two regression equations and one covariance. However, three more parameters are included by lavaan per default: The residual (unexplained) variance in SAT The variance of Income The variance of Education So, strictly speaking, if you don’t want to rely on the default settings, the syntax would be: &quot;SAT ~ Income + Education Income ~~ Education SAT~~SAT Income~~Income Education~~Education&quot; 7.0.5 Performing the analysis In lavaan, models are fit using the sem() function. Run the command ?sem to open the help file for this function. Try to figure out how to take the syntax you wrote for the previous question, and fit it to the Hamilton data. Click for explanation # Load the lavaan package library(lavaan) # Fit the model to df, and store the result in an object called &#39;fit&#39; fit &lt;- sem(model = &quot;SAT ~ Income + Education Income ~~ Education&quot;, data = df) This will result in a warning about the variances. You can ignore this. 7.0.6 Viewing the output Most of the relevant output of a lavaan analysis can be extracted using the summary() function. Get a summary for the analysis now. Do either of the predictors have a significant effect on SA? By specifying the option rsquare = TRUE in the summary() function, you can additionally get squared multiple correlations for the dependent variables. Click for explanation summary(fit, rsquare = TRUE) ## lavaan 0.6-5 ended normally after 48 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 6 ## ## Number of observations 21 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## SAT ~ ## Income 2.156 3.050 0.707 0.480 ## Education 136.022 29.819 4.562 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## Income ~~ ## Education 0.127 0.064 2.000 0.046 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .SAT 382.736 118.115 3.240 0.001 ## Income 2.562 0.791 3.240 0.001 ## Education 0.027 0.008 3.240 0.001 ## ## R-Square: ## Estimate ## SAT 0.603 7.0.7 Plotting the output The package semPlot can automatically plot simple SEM models, like path models and CFA models. To visualize this SEM model, install the semPlot package, and use the function semPaths: install.packages(&quot;semPlot&quot;) library(semPlot) semPaths(fit) The default plot can be improved upon, for example, by plotting the parameter estimates onto the paths, and rotating it to match our initial conceptual model at the start of this tutorial: semPaths(fit, whatLabels = &quot;est&quot;, rotation = 2) "],
["week-3-class.html", "Chapter 8 Week 3 - Class", " Chapter 8 Week 3 - Class This week, we will analyze the data from the European social survey, and the paper by Kestilä for the last time. Last week, you first replicated the results by Kestilä, and then ran your own set of factor analyses. Hopefully you experienced yourself that it matters quite a bit what type of factor analysis method you choose; both for the interpretation of your factors, and analyses that incorporate factor scores. Instead of doing Exploratory Factor Analysis, another way of analyzing the data from the European Social Survey would be to use Confirmatory Factor Analysis. During this practical, you will conduct a CFA and compare your results to earlier EFA and PCA results and the article by Kestilä. 8.0.1 Question 1 Download the ESS data (essround1-c.sav) from Blackboard, and load the data into R. Furthermore, you will have to load the package lavaan before starting with the exercises. Click for explanation library(lavaan) library(foreign) data &lt;- read.spss(&quot;essround1-c.sav&quot;, to.data.frame = TRUE) Furthermore, we want to work with numeric variables instead of factors once again, and with the countries of interest only. Click for explanation data[c(7:44, 48, 49, 50)] &lt;- lapply(data[c(7:44, 48, 49, 50)], as.numeric) data$yrbrn &lt;- as.numeric(as.character(data$yrbrn)) df &lt;- data[data$cntry %in% c(&quot;Austria&quot;, &quot;Belgium&quot;, &quot;Denmark&quot;, &quot;Finland&quot;, &quot;Germany&quot;, &quot;Italy&quot;, &quot;Netherlands&quot;, &quot;Norway&quot;, &quot;Sweden&quot;), ] df$cntry &lt;- factor(df$cntry) 8.0.2 Question 2 First, review your EFA-results for the ‘trust in politics’ items, as well as the question wordings of the items. How many factors do you expect? 8.0.3 Question 3 Build a CFA model for the trust in politics items by means of the R-package lavaan. A tutorial example is available here: http://lavaan.ugent.be/tutorial/cfa.html Make sure to ask for model fit statistics. What do you find for the value of Chi-square, df, RMSEA and CFI? Any idea why you find this Chi-square value? Does the model fit the data? Click for explanation trust_model_3f &lt;- &#39;trustpol =~ pltcare + pltinvt + trstplt satcntry =~ stfeco + stfgov + stfdem + stfedu + stfhlth trustinst =~ trstlgl + trstplc + trstun + trstprl&#39; fit_trust_model_3f &lt;- cfa(trust_model_3f, data = df) summary(fit_trust_model_3f, fit.measures = TRUE) ## lavaan 0.6-5 ended normally after 45 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 27 ## ## Used Total ## Number of observations 15448 18187 ## ## Model Test User Model: ## ## Test statistic 9188.922 ## Degrees of freedom 51 ## P-value (Chi-square) 0.000 ## ## Model Test Baseline Model: ## ## Test statistic 75675.049 ## Degrees of freedom 66 ## P-value 0.000 ## ## User Model versus Baseline Model: ## ## Comparative Fit Index (CFI) 0.879 ## Tucker-Lewis Index (TLI) 0.844 ## ## Loglikelihood and Information Criteria: ## ## Loglikelihood user model (H0) -357923.209 ## Loglikelihood unrestricted model (H1) -353328.748 ## ## Akaike (AIC) 715900.419 ## Bayesian (BIC) 716106.840 ## Sample-size adjusted Bayesian (BIC) 716021.036 ## ## Root Mean Square Error of Approximation: ## ## RMSEA 0.108 ## 90 Percent confidence interval - lower 0.106 ## 90 Percent confidence interval - upper 0.110 ## P-value RMSEA &lt;= 0.05 0.000 ## ## Standardized Root Mean Square Residual: ## ## SRMR 0.058 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Latent Variables: ## Estimate Std.Err z-value P(&gt;|z|) ## trustpol =~ ## pltcare 1.000 ## pltinvt 0.981 0.015 65.449 0.000 ## trstplt 2.848 0.035 80.855 0.000 ## satcntry =~ ## stfeco 1.000 ## stfgov 1.039 0.013 81.895 0.000 ## stfdem 0.979 0.012 80.257 0.000 ## stfedu 0.780 0.012 64.344 0.000 ## stfhlth 0.706 0.012 58.239 0.000 ## trustinst =~ ## trstlgl 1.000 ## trstplc 0.777 0.012 64.538 0.000 ## trstun 0.861 0.013 66.949 0.000 ## trstprl 1.123 0.013 85.721 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## trustpol ~~ ## satcntry 0.793 0.016 48.672 0.000 ## trustinst 0.950 0.018 51.888 0.000 ## satcntry ~~ ## trustinst 2.046 0.040 51.736 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .pltcare 0.651 0.008 77.811 0.000 ## .pltinvt 0.680 0.009 78.658 0.000 ## .trstplt 1.103 0.029 38.414 0.000 ## .stfeco 2.671 0.038 70.723 0.000 ## .stfgov 2.287 0.035 66.172 0.000 ## .stfdem 2.266 0.033 68.444 0.000 ## .stfedu 3.378 0.042 79.725 0.000 ## .stfhlth 3.721 0.045 81.846 0.000 ## .trstlgl 2.997 0.040 74.548 0.000 ## .trstplc 3.178 0.040 80.410 0.000 ## .trstun 3.443 0.043 79.405 0.000 ## .trstprl 1.746 0.030 57.842 0.000 ## trustpol 0.450 0.011 41.572 0.000 ## satcntry 2.751 0.058 47.286 0.000 ## trustinst 2.690 0.059 45.613 0.000 8.0.4 Question 4 As an alternative model, build a 1-factor model, with the same items as you used before, and one trust in politics factor. Evaluate the Chi-square, df, RMSEA and CFI again. Does the one factor-model fit better or worse than the factor model you previously estimated? Note, there is also a formal way to test whether a difference between two chi-square values is significant; more on that in the practicals of week 4. Click for explanation trust_model_1f &lt;- &#39;political_trust =~ pltcare + pltinvt + trstprl + trstplt + stfeco + stfgov + stfdem + stfedu + stfhlth + trstlgl + trstplc + trstun + trstep&#39; fit_trust_model_1f &lt;- sem(trust_model_1f, data = df) summary(fit_trust_model_1f, fit.measures = TRUE) ## lavaan 0.6-5 ended normally after 38 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 26 ## ## Used Total ## Number of observations 14778 18187 ## ## Model Test User Model: ## ## Test statistic 17667.304 ## Degrees of freedom 65 ## P-value (Chi-square) 0.000 ## ## Model Test Baseline Model: ## ## Test statistic 81699.096 ## Degrees of freedom 78 ## P-value 0.000 ## ## User Model versus Baseline Model: ## ## Comparative Fit Index (CFI) 0.784 ## Tucker-Lewis Index (TLI) 0.741 ## ## Loglikelihood and Information Criteria: ## ## Loglikelihood user model (H0) -374912.206 ## Loglikelihood unrestricted model (H1) -366078.555 ## ## Akaike (AIC) 749876.413 ## Bayesian (BIC) 750074.036 ## Sample-size adjusted Bayesian (BIC) 749991.410 ## ## Root Mean Square Error of Approximation: ## ## RMSEA 0.135 ## 90 Percent confidence interval - lower 0.134 ## 90 Percent confidence interval - upper 0.137 ## P-value RMSEA &lt;= 0.05 0.000 ## ## Standardized Root Mean Square Residual: ## ## SRMR 0.080 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Latent Variables: ## Estimate Std.Err z-value P(&gt;|z|) ## political_trust =~ ## pltcare 1.000 ## pltinvt 0.966 0.018 55.075 0.000 ## trstprl 2.986 0.043 70.171 0.000 ## trstplt 2.988 0.042 71.755 0.000 ## stfeco 2.262 0.039 57.544 0.000 ## stfgov 2.489 0.040 62.079 0.000 ## stfdem 2.522 0.039 64.095 0.000 ## stfedu 1.756 0.036 48.642 0.000 ## stfhlth 1.554 0.035 43.930 0.000 ## trstlgl 2.526 0.041 61.195 0.000 ## trstplc 1.956 0.036 54.052 0.000 ## trstun 2.350 0.040 59.017 0.000 ## trstep 2.296 0.038 60.160 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .pltcare 0.743 0.009 81.579 0.000 ## .pltinvt 0.775 0.009 82.043 0.000 ## .trstprl 1.938 0.027 70.877 0.000 ## .trstplt 1.548 0.023 67.052 0.000 ## .stfeco 3.565 0.044 81.289 0.000 ## .stfgov 3.044 0.038 79.326 0.000 ## .stfdem 2.631 0.034 78.072 0.000 ## .stfedu 3.941 0.047 83.419 0.000 ## .stfhlth 4.201 0.050 84.093 0.000 ## .trstlgl 3.370 0.042 79.787 0.000 ## .trstplc 3.410 0.041 82.311 0.000 ## .trstun 3.451 0.043 80.749 0.000 ## .trstep 3.019 0.038 80.272 0.000 ## political_trst 0.360 0.010 36.350 0.000 8.0.5 Question 5 Similarly, can you think of a 2-factor model that would explain political trust? Build this model as well, and compare Chi-square, df, RMSEA and CFI to both the 1-factor and the 3-factor model. Which of the models is the best in your opinion? By now, you should be able to perform your own two-factor CFA, based on substantive grounds. If you do not know how to do this immediately, please have a look at question 3. Note: None of the models fit really well. In practice, this would mean that you would have to change the model. For now, stick with the best model you have. 8.0.6 Question 6 Choose your best model, and ask for the standardized estimates by means of the addition standardized = TRUE in the summary command. Which item is the best predictor of the first factor? Click for explanation summary(fit_trust_model_3f, fit.measures = TRUE, standardized = TRUE) ## lavaan 0.6-5 ended normally after 45 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 27 ## ## Used Total ## Number of observations 15448 18187 ## ## Model Test User Model: ## ## Test statistic 9188.922 ## Degrees of freedom 51 ## P-value (Chi-square) 0.000 ## ## Model Test Baseline Model: ## ## Test statistic 75675.049 ## Degrees of freedom 66 ## P-value 0.000 ## ## User Model versus Baseline Model: ## ## Comparative Fit Index (CFI) 0.879 ## Tucker-Lewis Index (TLI) 0.844 ## ## Loglikelihood and Information Criteria: ## ## Loglikelihood user model (H0) -357923.209 ## Loglikelihood unrestricted model (H1) -353328.748 ## ## Akaike (AIC) 715900.419 ## Bayesian (BIC) 716106.840 ## Sample-size adjusted Bayesian (BIC) 716021.036 ## ## Root Mean Square Error of Approximation: ## ## RMSEA 0.108 ## 90 Percent confidence interval - lower 0.106 ## 90 Percent confidence interval - upper 0.110 ## P-value RMSEA &lt;= 0.05 0.000 ## ## Standardized Root Mean Square Residual: ## ## SRMR 0.058 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Latent Variables: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## trustpol =~ ## pltcare 1.000 0.671 0.639 ## pltinvt 0.981 0.015 65.449 0.000 0.658 0.624 ## trstplt 2.848 0.035 80.855 0.000 1.911 0.876 ## satcntry =~ ## stfeco 1.000 1.659 0.712 ## stfgov 1.039 0.013 81.895 0.000 1.724 0.752 ## stfdem 0.979 0.012 80.257 0.000 1.624 0.733 ## stfedu 0.780 0.012 64.344 0.000 1.294 0.576 ## stfhlth 0.706 0.012 58.239 0.000 1.171 0.519 ## trustinst =~ ## trstlgl 1.000 1.640 0.688 ## trstplc 0.777 0.012 64.538 0.000 1.275 0.582 ## trstun 0.861 0.013 66.949 0.000 1.411 0.605 ## trstprl 1.123 0.013 85.721 0.000 1.842 0.812 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## trustpol ~~ ## satcntry 0.793 0.016 48.672 0.000 0.712 0.712 ## trustinst 0.950 0.018 51.888 0.000 0.863 0.863 ## satcntry ~~ ## trustinst 2.046 0.040 51.736 0.000 0.752 0.752 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .pltcare 0.651 0.008 77.811 0.000 0.651 0.591 ## .pltinvt 0.680 0.009 78.658 0.000 0.680 0.611 ## .trstplt 1.103 0.029 38.414 0.000 1.103 0.232 ## .stfeco 2.671 0.038 70.723 0.000 2.671 0.493 ## .stfgov 2.287 0.035 66.172 0.000 2.287 0.435 ## .stfdem 2.266 0.033 68.444 0.000 2.266 0.462 ## .stfedu 3.378 0.042 79.725 0.000 3.378 0.668 ## .stfhlth 3.721 0.045 81.846 0.000 3.721 0.731 ## .trstlgl 2.997 0.040 74.548 0.000 2.997 0.527 ## .trstplc 3.178 0.040 80.410 0.000 3.178 0.662 ## .trstun 3.443 0.043 79.405 0.000 3.443 0.633 ## .trstprl 1.746 0.030 57.842 0.000 1.746 0.340 ## trustpol 0.450 0.011 41.572 0.000 1.000 1.000 ## satcntry 2.751 0.058 47.286 0.000 1.000 1.000 ## trustinst 2.690 0.059 45.613 0.000 1.000 1.000 standardizedsolution(fit_trust_model_3f) 8.0.7 Question 7 Byrne (2005) states that under certain conditions, a second order CFA can be specified. Would the political trust model qualify for a second order factor model? 8.0.8 Question 8 Specify a second-order factor model and run this model. What do you conclude when you evaluate model fit? Is this model better than your model that you selected in question 6? Click for explanation To run a second-order factor model, you can simply add an additional line within the single quotes containing the factors that you want in the second-order factor model, like in the example below. trust_model_3f2o &lt;- &#39;trustpol =~ pltcare + pltinvt + trstprl + trstplt satcntry =~ stfeco + stfgov + stfdem + stfedu + stfhlth trustinst =~ trstlgl + trstplc + trstun + trstep trust =~ trustpol + trustinst&#39; fit_trust_model_3f2o &lt;- sem(trust_model_3f2o, data = df) summary(fit_trust_model_3f2o, fit.measures = TRUE) ## lavaan 0.6-5 ended normally after 46 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 29 ## ## Used Total ## Number of observations 14778 18187 ## ## Model Test User Model: ## ## Test statistic 10116.996 ## Degrees of freedom 62 ## P-value (Chi-square) 0.000 ## ## Model Test Baseline Model: ## ## Test statistic 81699.096 ## Degrees of freedom 78 ## P-value 0.000 ## ## User Model versus Baseline Model: ## ## Comparative Fit Index (CFI) 0.877 ## Tucker-Lewis Index (TLI) 0.845 ## ## Loglikelihood and Information Criteria: ## ## Loglikelihood user model (H0) -371137.053 ## Loglikelihood unrestricted model (H1) -366078.555 ## ## Akaike (AIC) 742332.105 ## Bayesian (BIC) 742552.531 ## Sample-size adjusted Bayesian (BIC) 742460.372 ## ## Root Mean Square Error of Approximation: ## ## RMSEA 0.105 ## 90 Percent confidence interval - lower 0.103 ## 90 Percent confidence interval - upper 0.106 ## P-value RMSEA &lt;= 0.05 0.000 ## ## Standardized Root Mean Square Residual: ## ## SRMR 0.058 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Latent Variables: ## Estimate Std.Err z-value P(&gt;|z|) ## trustpol =~ ## pltcare 1.000 ## pltinvt 0.973 0.016 60.793 0.000 ## trstprl 2.825 0.037 75.592 0.000 ## trstplt 2.943 0.037 78.957 0.000 ## satcntry =~ ## stfeco 1.000 ## stfgov 1.046 0.013 80.774 0.000 ## stfdem 0.976 0.012 78.465 0.000 ## stfedu 0.779 0.012 63.067 0.000 ## stfhlth 0.705 0.012 57.172 0.000 ## trustinst =~ ## trstlgl 1.000 ## trstplc 0.799 0.012 66.870 0.000 ## trstun 0.930 0.013 72.417 0.000 ## trstep 0.875 0.012 71.768 0.000 ## trust =~ ## trustpol 1.000 ## trustinst 2.391 0.042 56.391 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## satcntry ~~ ## trust 0.797 0.016 48.523 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .pltcare 0.687 0.009 79.196 0.000 ## .pltinvt 0.718 0.009 79.838 0.000 ## .trstprl 1.834 0.028 64.765 0.000 ## .trstplt 1.166 0.023 50.203 0.000 ## .stfeco 2.648 0.038 68.975 0.000 ## .stfgov 2.255 0.035 64.065 0.000 ## .stfdem 2.295 0.034 67.280 0.000 ## .stfedu 3.376 0.043 77.978 0.000 ## .stfhlth 3.700 0.046 80.021 0.000 ## .trstlgl 2.770 0.041 67.151 0.000 ## .trstplc 2.940 0.039 74.828 0.000 ## .trstun 2.935 0.042 70.714 0.000 ## .trstep 2.699 0.038 71.292 0.000 ## .trustpol 0.035 0.004 9.165 0.000 ## satcntry 2.761 0.059 46.436 0.000 ## .trustinst 0.722 0.030 24.029 0.000 ## trust 0.381 0.011 36.203 0.000 8.0.9 Question 9 Build a new one-factor model, only using the 3 items that ask about the respondents trust in institutions with 1) trust in the legal system, 2) trust in the police and 3) trust in the UN (see below). You can also take the full model you specified in either question 6 and question 9, but you might experience that the model becomes complicated due to the large amount of arrows. After doing this, add as predictors of the latent factor: gender, age, education in years, political interest and self-placement on the left right scale. Estimate the model. The model doesn’t fit very well, but for now, we will stick with this model. Write down the regression coefficients (standardized and unstandardized) and relevant test statistics. Hint: Once you add predictions to your model, you should use sem() instead of cfa(). Click for explanation We will first have to do some recoding again. You might want to make an age variable instead of a yearborn variable, which eases the interpretation. Furthermore, a dummy for gender is more informative than just the variable gndr, although this will be treated as a dummy. You will also have to recode the variables eduyrs and lrscale to numerical variables, and you will have to make a two-category dummy for the variable polintr. df$age &lt;- 2002 - df$yrbrn model_q9 &lt;- &#39;trustinst =~ trstlgl + trstplc + trstun trustinst ~ gndr + age + eduyrs + polintr + lrscale&#39; fit_model_q9 &lt;- sem(model_q9, data = df) summary(fit_model_q9, fit.measures = TRUE, standardized = TRUE) ## lavaan 0.6-5 ended normally after 41 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 11 ## ## Used Total ## Number of observations 15524 18187 ## ## Model Test User Model: ## ## Test statistic 615.470 ## Degrees of freedom 10 ## P-value (Chi-square) 0.000 ## ## Model Test Baseline Model: ## ## Test statistic 11664.434 ## Degrees of freedom 18 ## P-value 0.000 ## ## User Model versus Baseline Model: ## ## Comparative Fit Index (CFI) 0.948 ## Tucker-Lewis Index (TLI) 0.906 ## ## Loglikelihood and Information Criteria: ## ## Loglikelihood user model (H0) -99125.659 ## Loglikelihood unrestricted model (H1) -98817.925 ## ## Akaike (AIC) 198273.319 ## Bayesian (BIC) 198357.470 ## Sample-size adjusted Bayesian (BIC) 198322.513 ## ## Root Mean Square Error of Approximation: ## ## RMSEA 0.062 ## 90 Percent confidence interval - lower 0.058 ## 90 Percent confidence interval - upper 0.067 ## P-value RMSEA &lt;= 0.05 0.000 ## ## Standardized Root Mean Square Residual: ## ## SRMR 0.025 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Latent Variables: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## trustinst =~ ## trstlgl 1.000 1.989 0.836 ## trstplc 0.802 0.014 56.879 0.000 1.596 0.731 ## trstun 0.584 0.012 50.257 0.000 1.162 0.503 ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## trustinst ~ ## gndr -0.101 0.036 -2.821 0.005 -0.051 -0.025 ## age 0.000 0.001 0.084 0.933 0.000 0.001 ## eduyrs 0.065 0.005 12.303 0.000 0.033 0.120 ## polintr -0.147 0.023 -6.357 0.000 -0.074 -0.061 ## lrscale 0.087 0.009 10.046 0.000 0.044 0.090 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .trstlgl 1.700 0.065 26.040 0.000 1.700 0.301 ## .trstplc 2.213 0.047 46.640 0.000 2.213 0.465 ## .trstun 3.996 0.050 79.266 0.000 3.996 0.747 ## .trustinst 3.833 0.085 44.906 0.000 0.969 0.969 8.0.10 Optional You can plot the resulting model using semPaths(): library(semPlot) semPaths(fit_model_q9, whatLabels = &quot;est&quot;, rotation = 4) 8.0.11 Question 10 Now, replace the latent score “trust in institutions” with the EFA factor score ‘trust in institutions’. Delete the separate indicators, so you end up with the model below. Click for explanation model_q10 &lt;- &#39;trustinstEFA ~ gndr + age + eduyrs + polintr + lrscale&#39; fit_model_q10 &lt;- sem(model_q10, data = df) summary(fit_model_q10, fit.measures = TRUE, standardized = TRUE) ## lavaan 0.6-5 ended normally after 20 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 6 ## ## Used Total ## Number of observations 13829 18187 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Model Test Baseline Model: ## ## Test statistic 575.844 ## Degrees of freedom 5 ## P-value 0.000 ## ## User Model versus Baseline Model: ## ## Comparative Fit Index (CFI) 1.000 ## Tucker-Lewis Index (TLI) 1.000 ## ## Loglikelihood and Information Criteria: ## ## Loglikelihood user model (H0) -19582.755 ## Loglikelihood unrestricted model (H1) -19582.755 ## ## Akaike (AIC) 39177.510 ## Bayesian (BIC) 39222.717 ## Sample-size adjusted Bayesian (BIC) 39203.649 ## ## Root Mean Square Error of Approximation: ## ## RMSEA 0.000 ## 90 Percent confidence interval - lower 0.000 ## 90 Percent confidence interval - upper 0.000 ## P-value RMSEA &lt;= 0.05 NA ## ## Standardized Root Mean Square Residual: ## ## SRMR 0.000 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## trustinstEFA ~ ## gndr -0.146 0.017 -8.537 0.000 -0.146 -0.072 ## age -0.000 0.001 -0.443 0.658 -0.000 -0.004 ## eduyrs 0.017 0.003 6.686 0.000 0.017 0.060 ## polintr 0.012 0.011 1.075 0.282 0.012 0.010 ## lrscale 0.087 0.004 20.970 0.000 0.087 0.176 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .trustinstEFA 0.994 0.012 83.153 0.000 0.994 0.959 Compare the results. Does it matter whether we use a CFA or EFA to predict trust in institutions? "],
["week-4-home.html", "Chapter 9 Week 4 - Home", " Chapter 9 Week 4 - Home Load the data file SocialRejection.sav into R. It contains three variables: Condition (IV), SelfEst (IV), and Spent (DV). 9.0.1 Question 1 Check the assumption of homogeneous regression lines (no interaction) first. What is your conclusion? Hint: You need to estimate a model with, and one without an interaction, and compare them using the anova() function. Click for explanation ancova_main &lt;- aov(Spent ~ Condition + SelfEst, data = data) ancova_int &lt;- aov(Spent ~ Condition*SelfEst, data = data) anova(ancova_main, ancova_int) The lines are homogeneous, the assumption is met (interaction is not significant). 9.0.2 Question 2 What should you do when this assumption is violated? 9.0.3 Question 3 Before you can do an ANCOVA, you should also check the assumption of homogeneity. What does homogeneity imply, and is the assumption met? Hint: You did this in the Week 1 class exercise. Click for explanation We can do a test of homogeneity of the variances of Spent across conditions: bartlett.test(formula = Spent~Condition, data = data) ## ## Bartlett test of homogeneity of variances ## ## data: Spent by Condition ## Bartlett&#39;s K-squared = 0.16678, df = 2, p-value = 0.92 However, note that the assumption of homogeneity actually requires the residual variance, after controlling for the covariate SelfEst, to be the same across conditions. We can extract these residuals from a regression with only SelfEst as a predictor: reg_selfest &lt;- lm(Spent ~ SelfEst, data = data) residuals_selfest &lt;- reg_selfest$residuals Then, we can test the null hypothesis that the error variance of the dependent variable is equal across groups: bartlett.test(residuals_selfest, data$Condition) ## ## Bartlett test of homogeneity of variances ## ## data: residuals_selfest and data$Condition ## Bartlett&#39;s K-squared = 0.92603, df = 2, p-value = 0.6294 The test is not significant, meaning that the error variances are indeed equal, the assumption is met. 9.0.4 Question 4 What should you do when this assumption is violated? Click for explanation You cannot really “solve” this problem in classical regression or ANCOVA, because only one parameter is estimated for the error variance. In SEM, however, you can estimate different error variance parameters for each group. 9.0.5 Question 5 Run the actual ANCOVA (or use previous output). What are your conclusions about the effects of the factor and the covariate? Click for explanation summary(ancova_main) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Condition 2 126.8 63.4 4.402 0.0169 * ## SelfEst 1 419.5 419.5 29.118 1.49e-06 *** ## Residuals 55 792.4 14.4 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Self esteem is significant, F (1, 55) = 29.118, p &lt; .001, the level of self esteem of the respondent is related to the amount spent. Condition is significant after controlling for the effect of self-esteem, F (2, 55) = 4.402, p = .017, the amount spent differs between the three conditions. 9.0.6 Question 6 Let’s examine the differences in conditional means between the three conditions. In order to do so, we can use several approaches. 9.0.6.1 Approach 1: Conditional means We can obtain the conditional means of the three groups by asking for the predicted (expected) value, based on the model, for each of the three conditions, keeping the covariate constant at 0. For this, we apply the predict() function to the object containing our analysis. We make a small new dataset for the values that we want predictions for: new_data &lt;- data.frame(Condition = c(&quot;rejection&quot;, &quot;neutral&quot;, &quot;confirming&quot;), SelfEst = c(0, 0, 0)) predict(ancova_main, new_data) ## 1 2 3 ## 12.449100 10.265532 9.152918 What are your conclusions about the three conditions (i.e., how do they differ)? 9.0.6.2 Approach 2: Testing significance We can test the significance for these differences using TukeyHSD() again, but to get the conditional means, we need to use the residuals from a model that includes only SelfEst, which we obtained before: reg_selfest &lt;- lm(Spent ~ SelfEst, data = data) residuals_selfest &lt;- reg_selfest$residuals anova_conditional &lt;- aov(residuals_selfest ~ data$Condition) TukeyHSD(anova_conditional) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = residuals_selfest ~ data$Condition) ## ## $`data$Condition` ## diff lwr upr p adj ## neutral-rejection -2.174775 -5.076198 0.7266467 0.1773921 ## confirming-rejection -3.296276 -6.197698 -0.3948536 0.0223500 ## confirming-neutral -1.121500 -3.985483 1.7424826 0.6157693 Respondents in the rejection condition spent more, than respondents in the neutral condition and the confirming condition. These differences are not tested on significance between two groups. 9.0.6.3 Approach 3: Plotting the difference This is where R really shines: We can quickly put together a plot that shows the difference between groups, along with the raw data. We use the package ggplot2 library(ggplot2) # Put the data for the plot together plot_data &lt;- data.frame(Spent_resid = residuals_selfest, Condition = data$Condition) # Basic plot; indicate that you want condition on the x-axis and Spent_resid on # the y-axis ggplot(plot_data, aes(x = Condition, y = Spent_resid)) + geom_boxplot() + # Add a boxplot for each condition geom_jitter(width = .2) + # Plot raw datapoints on top theme_bw() # Add a nice APA theme 9.0.7 QUestion 7 An AN(C)OVA can also be specified as a regression analysis. R automatically creates dummies. Use the lm() function instead of aov(), and compare the results. Click for explanation ancova_main &lt;- aov(Spent ~ Condition + SelfEst, data = data) summary(ancova_main) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Condition 2 126.8 63.4 4.402 0.0169 * ## SelfEst 1 419.5 419.5 29.118 1.49e-06 *** ## Residuals 55 792.4 14.4 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 lm_main &lt;- lm(Spent ~ Condition + SelfEst, data = data) summary(lm_main) ## ## Call: ## lm(formula = Spent ~ Condition + SelfEst, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.9987 -2.5886 -0.4841 1.9772 10.6503 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 12.44910 1.98050 6.286 5.54e-08 *** ## Conditionneutral -2.18357 1.22451 -1.783 0.08007 . ## Conditionconfirming -3.29618 1.21599 -2.711 0.00894 ** ## SelfEst -0.52406 0.09712 -5.396 1.49e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 3.796 on 55 degrees of freedom ## Multiple R-squared: 0.4081, Adjusted R-squared: 0.3758 ## F-statistic: 12.64 on 3 and 55 DF, p-value: 2.142e-06 You can get the conditional means directly from this lm() model by dropping the intercept, using -1 (which means: minus the intercept) in the formula: lm_no_intercept &lt;- lm(Spent ~ -1 + Condition + SelfEst, data = data) summary(lm_no_intercept) ## ## Call: ## lm(formula = Spent ~ -1 + Condition + SelfEst, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.9987 -2.5886 -0.4841 1.9772 10.6503 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## Conditionrejection 12.44910 1.98050 6.286 5.54e-08 *** ## Conditionneutral 10.26553 2.10191 4.884 9.35e-06 *** ## Conditionconfirming 9.15292 1.96952 4.647 2.14e-05 *** ## SelfEst -0.52406 0.09712 -5.396 1.49e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 3.796 on 55 degrees of freedom ## Multiple R-squared: 0.4218, Adjusted R-squared: 0.3797 ## F-statistic: 10.03 on 4 and 55 DF, p-value: 3.616e-06 9.0.8 Question 8 To perform this analysis as a structural equation model, we need to manually compute dummy variables. We can use the function model.matrix() to “expand” a factor variable into dummies: data_dummies &lt;- model.matrix(~ -1 + Condition, data = data) head(data_dummies) ## Conditionrejection Conditionneutral Conditionconfirming ## 1 1 0 0 ## 2 1 0 0 ## 3 1 0 0 ## 4 1 0 0 ## 5 1 0 0 ## 6 1 0 0 We can then bind these columns with dummies to our original data using cbind() (column bind): data &lt;- cbind(data, data_dummies) head(data) Begin by specifying the model in lavaan like this: Click for explanation library(lavaan) ancova_lavaan &lt;- sem(&#39;Spent ~ SelfEst + Conditionrejection + Conditionconfirming&#39;, data = data) summary(ancova_lavaan) ## lavaan 0.6-5 ended normally after 21 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 4 ## ## Number of observations 59 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## Spent ~ ## SelfEst -0.524 0.094 -5.589 0.000 ## Conditionrjctn 2.184 1.182 1.847 0.065 ## Conditncnfrmng -1.113 1.167 -0.953 0.341 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .Spent 13.430 2.473 5.431 0.000 To obtain a plot of these results and compare it to our picture above, use SemPlot: library(semPlot) semPaths(ancova_lavaan, whatLabels = &quot;est&quot;, rotation = 2) 9.0.9 Additional options Note: When you are doing an ANCOVA (even as a regression model with dummies), you want to analyze both the covariance structure AND the mean structure. To include the latter in your analysis, you have to tell lavaan to include this by adding the argument meanstructure = TRUE in the fitting function: library(lavaan) ancova_lavaan &lt;- sem(&#39;Spent ~ SelfEst + Conditionrejection + Conditionconfirming&#39;, data = data, meanstructure = TRUE) summary(ancova_lavaan) ## lavaan 0.6-5 ended normally after 35 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 5 ## ## Number of observations 59 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## Spent ~ ## SelfEst -0.524 0.094 -5.589 0.000 ## Conditionrjctn 2.184 1.182 1.847 0.065 ## Conditncnfrmng -1.113 1.167 -0.953 0.341 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .Spent 10.266 2.029 5.058 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .Spent 13.430 2.473 5.431 0.000 To obtain the standardized results and the proportion of explained variance (= squared multiple correlation, i.e., R2), you can use the options in the summary() function: summary(ancova_lavaan, standardized = TRUE, rsquare = TRUE) ## lavaan 0.6-5 ended normally after 35 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 5 ## ## Number of observations 59 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## Spent ~ ## SelfEst -0.524 0.094 -5.589 0.000 -0.524 -0.565 ## Conditionrjctn 2.184 1.182 1.847 0.065 2.184 0.214 ## Conditncnfrmng -1.113 1.167 -0.953 0.341 -1.113 -0.111 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .Spent 10.266 2.029 5.058 0.000 10.266 2.155 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .Spent 13.430 2.473 5.431 0.000 13.430 0.592 ## ## R-Square: ## Estimate ## Spent 0.408 9.0.10 Question 9 Compare your results to those obtained with the regression analysis. What is your conclusion? 9.0.11 Question 10 Check the model fit. What do you conclude? Note: Use summary() and fit.measures = TRUE Click for explanation summary(ancova_lavaan, fit.measures = TRUE) ## lavaan 0.6-5 ended normally after 35 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 5 ## ## Number of observations 59 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Model Test Baseline Model: ## ## Test statistic 30.941 ## Degrees of freedom 3 ## P-value 0.000 ## ## User Model versus Baseline Model: ## ## Comparative Fit Index (CFI) 1.000 ## Tucker-Lewis Index (TLI) 1.000 ## ## Loglikelihood and Information Criteria: ## ## Loglikelihood user model (H0) -160.344 ## Loglikelihood unrestricted model (H1) -160.344 ## ## Akaike (AIC) 330.689 ## Bayesian (BIC) 341.077 ## Sample-size adjusted Bayesian (BIC) 325.353 ## ## Root Mean Square Error of Approximation: ## ## RMSEA 0.000 ## 90 Percent confidence interval - lower 0.000 ## 90 Percent confidence interval - upper 0.000 ## P-value RMSEA &lt;= 0.05 NA ## ## Standardized Root Mean Square Residual: ## ## SRMR 0.000 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## Spent ~ ## SelfEst -0.524 0.094 -5.589 0.000 ## Conditionrjctn 2.184 1.182 1.847 0.065 ## Conditncnfrmng -1.113 1.167 -0.953 0.341 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .Spent 10.266 2.029 5.058 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .Spent 13.430 2.473 5.431 0.000 Saturated model, so perfect fit. Because the number of parameters to be estimated is equal to the number of observed statistics, there is a perfect fit. Here our interest is mainly in getting the estimates, not in the model-fit. "],
["week-4-class.html", "Chapter 10 Week 4 - Class", " Chapter 10 Week 4 - Class You will continue with the analysis of the Social Rejection data from the Take Home exercise. Instead of running the model as a regression model with dummy variables (as in the Take Home exercise), in lavaan you can also run the model as a regression model with multiple groups. So, when you have data with categorical and continuous independent variables, as in the data file SocialRejection.sav, you could either perform: an ANCOVA in R a regression analysis with dummy variables (in R or lavaan) or you could perform a multiple group analysis in lavaan. The advantages of performing a multiple groups analysis in lavaan in this situation are: You can allow for differences in the (residual) variances across the groups (= violation of assumption of homogeneity) You can more easily test the assumption of homogenous regression lines In a multiple group analysis you specify one model and test whether this model is correct for all the groups, or whether there are differences between the groups. 10.0.1 Specify basic model First, specify the following model as a text string, so you can later use it in lavaan: Click for explanation reg_model &lt;- &quot;Spent ~ SelfEst&quot; 10.0.2 How to run multi-group model To run this model as a multi-group model, you can specify the argument group = when running the analysis: library(lavaan) multi_group &lt;- sem(reg_model, data = data, group = &quot;Condition&quot;) Now, obtain the standardized estimates and the squared multiple correlations (r square) for this model. Click for explanation summary(multi_group, standardize = TRUE, rsquare = TRUE) ## lavaan 0.6-5 ended normally after 53 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 9 ## ## Number of observations per group: ## rejection 19 ## neutral 20 ## confirming 20 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## Test statistic for each group: ## rejection 0.000 ## neutral 0.000 ## confirming 0.000 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## ## Group 1 [rejection]: ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## Spent ~ ## SelfEst -0.449 0.145 -3.102 0.002 -0.449 -0.580 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .Spent 11.073 2.768 4.000 0.000 11.073 2.593 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .Spent 12.108 3.928 3.082 0.002 12.108 0.664 ## ## R-Square: ## Estimate ## Spent 0.336 ## ## ## Group 2 [neutral]: ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## Spent ~ ## SelfEst -0.495 0.214 -2.315 0.021 -0.495 -0.460 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .Spent 9.690 4.331 2.237 0.025 9.690 2.095 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .Spent 16.874 5.336 3.162 0.002 16.874 0.789 ## ## R-Square: ## Estimate ## Spent 0.211 ## ## ## Group 3 [confirming]: ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## Spent ~ ## SelfEst -0.617 0.137 -4.523 0.000 -0.617 -0.711 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .Spent 10.861 2.604 4.171 0.000 10.861 2.322 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .Spent 10.812 3.419 3.162 0.002 10.812 0.494 ## ## R-Square: ## Estimate ## Spent 0.506 10.0.3 Question 1 Report on the parameter estimates for the three groups; i.e., the regression coefficients, the variances (of SelfEst), the residual variances (i.e., the variances of the residuals of Spent), the means (of SelfEst), and the intercepts (means of Spent). 10.0.4 Question 2 Which constraints would we need to impose, across the groups, in order to make this multi-group model equivalent to an ANCOVA? Click for explanation 1. Fix regression lines of the covariate to be equal across groups 2. Fix residual variances to be equal across groups 10.0.5 Question 3 An ANCOVA tests whether the means of several groups on the DV (Spent) are all equal (while controlling for the covariate). What are the \\(H_0\\) and \\(H_1\\) of an ANCOVA? Click for explanation \\(H_0\\): The intercepts of Spent are all equal across groups \\(H_1\\): There is a difference in intercepts of Spent across groups 10.0.6 Question 4 You could test the null-hypothesis that you formulated in the previous question by imposing one more constraint across the three groups. What is this constraint? Click for explanation Fix all intercepts to be equal. 10.0.7 Imposing constraints So, by putting constraints to these models, we can make the same model as an ANCOVA. In lavaan, we impose constraints by giving labels to parameters. You use c() to make a vector of labels that is equally long as the number of groups, and you can give any name to the labels. You then use the * symbol to assign it to a parameter. The syntax looks like this: &quot;Spent ~ c(labelgroup1, labelgroup2, labelgroup3) * SelfEst&quot; If you use the same name multiple times, these parameters will be constrained to be equal: &quot;Spent ~ c(label, label, label) * SelfEst&quot; Constraints for variances are specified similarly: &quot;Spent ~~ c(label, label, label) * Spent&quot; 10.0.8 Stepwise approach If you want to add several restrictions (contraints), we can impose them all at once, or in a stepwise manner. Here, we will explain the stepwise approach. But if you know which model you want to run (e.g., an ANCOVA), you can also skip these steps and just run your final model and check if the fit is good. First you test the model without the constraints and the next step is that you test the model with the first constraint, then a model with the first and second constraint, and so forth. These are all nested models. Give the models informative names, so you can easily compare them. NOTE: make sure to specify increasingly more restricted models, that is, do not release restrictions once they have been imposed). So you go from completely free to most restrictive. You can compare subsequent models using chi-square difference tests (ironically, by calling the anova() function) to ensure that the constraints you imposed are tenable. Note that if the chi-square difference test is significant, this means you CANNOT impose the constraint! In this case, we could run the following nested models: Unconstrained model. No constraints are imposed Model 1. Structural weights: constrain the regression coefficient across groups Model 2. Structural residuals: constrain the variances and covariances of the residuals of the endogenous variables (here: Spent) Model 3. Structural intercepts: constrain the intercepts of the endogenous variables across groups We can compare two of these models using the anova() function: anova(m1, m2) However, with more than two models, it is convenient to compare all of them at once. For this, we can use the function compareFit() from the semTools package (which you have to install): library(semTools) compareFit(weights = m1, residuals = m2, intercepts = m3) 10.0.9 Question 5 Run the series of models (nested models) as described above. Compare the models and report the chi-square difference test of this comparison. Why does this test have the df it has? What is your conclusion about the constraints you imposed? What does this mean? Click for explanation mu &lt;- sem(&quot;Spent ~ SelfEst&quot;, data = data, group = &quot;Condition&quot;) m1 &lt;- sem(&quot;Spent ~ c(a, a, a) * SelfEst&quot;, data = data, group = &quot;Condition&quot;) m2 &lt;- sem(&quot;Spent ~ c(a, a, a) * SelfEst Spent ~~ c(b, b, b) * Spent&quot;, data = data, group = &quot;Condition&quot;) m3 &lt;- sem(&quot;Spent ~ c(a, a, a) * SelfEst Spent ~~ c(b, b, b) * Spent Spent ~ c(c, c, c) * 1 &quot;, data = data, group = &quot;Condition&quot;) compareFit(unconstrained = mu, regression = m1, residuals = m2, intercepts = m3) ## ################### Nested Model Comparison ######################### ## Chi-Squared Difference Test ## ## Df AIC BIC Chisq Chisq diff Df diff Pr(&gt;Chisq) ## unconstrained 0 336.95 355.64 0.0000 ## regression 2 333.69 348.23 0.7435 0.7435 2 0.68954 ## residuals 4 330.69 341.08 1.7420 0.9986 2 0.60697 ## intercepts 6 334.29 340.53 9.3477 7.6056 2 0.02231 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## ####################### Model Fit Indices ########################### ## chisq df pvalue cfi tli aic bic rmsea srmr ## unconstrained .000† NA 1.000 1.000 336.947 355.645 .000† .000† ## regression .743 2 .690 1.000† 1.080† 333.690 348.233 .000† .057 ## residuals 1.742 4 .783 1.000† 1.072 330.689† 341.077 .000† .069 ## intercepts 9.348 6 .155 .858 .929 334.295 340.527† .168 .142 ## ## ################## Differences in Fit Indices ####################### ## df cfi tli aic bic rmsea srmr ## regression - unconstrained 2 0.000 0.080 -3.257 -7.412 0.000 0.057 ## residuals - regression 2 0.000 -0.008 -3.001 -7.157 0.000 0.012 ## intercepts - intercepts 2 -0.142 -0.143 3.606 -0.549 0.168 0.073 In model 1 we constrained the regression lines to be equal across groups. In this model there is 1 regression coefficient estimated instead of 3, so the difference in df = 3-1=2. The associated chi-square is not significant Chi2(2) = 0.74, p = .69. This means that the regression lines can be considered equal across groups, and the first assumption of Ancova holds. In model 2 we additionally constrained the residual variance of Spent to be equal across groups. In this model there is 1 residual variance estimated instead of 3, so the difference in df with the previous model is 3-1=2. The associated chi-square is not significant Chi2(2) = 1.74, p = .61. This means that the residual variances of Spent can als be considered equal across groups, and both assumptions hold. 10.0.10 Question 6 Next, compare Model 3 to Model 2. Report the chi-square difference test, what is the conclusion now? Is it the same conclusion from the ANCOVA? Report the relevant results for both the ANCOVA and the Multi-group model, compare the results. (Also think about: what would you report in an article?) Click for explanation Additionally constraining the intercepts to be equal across groups significantly deteriorated model fit, Chi2(2) = 7.61, p = .02. This means that the intercepts cannot be considered equal across groups. There is thus a significant difference in Spent between these conditions, controlled for Self-Esteem. In model 2 we see that, compared to the neutral condition (M = 10.27), the intercept is highest in the Rejection condition (M = 12.45) and lowest in the Confirming condition (M = 9.15). In the ANCOVA in SPSS we saw that the effect of Condition was significant after controlling for the effect of self-esteem, F (2, 55) = 3.784, p &lt; .05, so the amount spent differs between the three conditions. Respondents in the rejection condition spent more, than respondents in the neutral condition and the confirming condition. The two conclusions are similar. "],
["week-5-home.html", "Chapter 11 Week 5 - Home", " Chapter 11 Week 5 - Home The data file SelfEsteem.sav contains the following variables: Parental Attachment Peer Attachment Empathy Prosocial behavior Aggression Self-esteem Which were measured for 143 college students (mean age: 18.6 years, SD=1.61). The researcher is interested in the direct and indirect effects of parental and peer attachment on self-esteem, and the mediating roles of empathy and social behavior (i.e., prosocial behavior and aggression). Specifically, the researcher expects that having good relationships with peers will increase prosocial behavior and decrease aggressive behavior, and that this is probably mediated through empathy (since people who experience empathy are likely to want to decrease distress in others), while the relationships with parents are expected to have a more direct effect on self-esteem. 11.0.1 Specify model To investigate these research questions, you need to specify the model depicted below. Create a text string describing this model for later use with lavaan: Click for explanation mediation_model &lt;- &quot;SelfEst ~ ProSoc + Aggr + ParAtt + PeerAtt ProSoc ~ Emp Aggr ~ Emp Emp ~ ParAtt + PeerAtt ProSoc ~~ Aggr ParAtt ~~ PeerAtt&quot; 11.0.2 Question 1 How many and which paths are there from Parental Attachment to Self-esteem? And from Peer Attachment to Self-esteem? Click for explanation PARA-&gt;SE: 3 if you dont count covariances 6 if you count covariance between PARATT and PEERATT 10 if you (additionally) count the covariance between e2 and e3 I think the indirect pathway in AMOS does not count covariances, so the indirect effect estimate in AMOS is made up of PARATT -&gt; EMP -&gt; PROSOC -&gt; SELFEST, and of PARATT -&gt; EMP -&gt; AGGR -&gt; SELFEST PEERA-&gt;SE: as above 11.0.3 Question 4 Run this model. Discuss the fit of the model. Click for explanation fit_mediation &lt;- sem(mediation_model, data = data) summary(fit_mediation, fit.measures = TRUE) ## lavaan 0.6-5 ended normally after 18 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 16 ## ## Number of observations 143 ## ## Model Test User Model: ## ## Test statistic 12.609 ## Degrees of freedom 5 ## P-value (Chi-square) 0.027 ## ## Model Test Baseline Model: ## ## Test statistic 174.959 ## Degrees of freedom 15 ## P-value 0.000 ## ## User Model versus Baseline Model: ## ## Comparative Fit Index (CFI) 0.952 ## Tucker-Lewis Index (TLI) 0.857 ## ## Loglikelihood and Information Criteria: ## ## Loglikelihood user model (H0) -1131.703 ## Loglikelihood unrestricted model (H1) -1125.399 ## ## Akaike (AIC) 2295.407 ## Bayesian (BIC) 2342.812 ## Sample-size adjusted Bayesian (BIC) 2292.185 ## ## Root Mean Square Error of Approximation: ## ## RMSEA 0.103 ## 90 Percent confidence interval - lower 0.032 ## 90 Percent confidence interval - upper 0.176 ## P-value RMSEA &lt;= 0.05 0.093 ## ## Standardized Root Mean Square Residual: ## ## SRMR 0.059 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## SelfEst ~ ## ProSoc 0.312 0.084 3.721 0.000 ## Aggr 0.159 0.083 1.915 0.056 ## ParAtt 0.240 0.076 3.153 0.002 ## PeerAtt 0.083 0.089 0.935 0.350 ## ProSoc ~ ## Emp 0.520 0.071 7.285 0.000 ## Aggr ~ ## Emp -0.354 0.078 -4.528 0.000 ## Emp ~ ## ParAtt 0.078 0.075 1.045 0.296 ## PeerAtt 0.306 0.086 3.557 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## .ProSoc ~~ ## .Aggr -0.099 0.061 -1.621 0.105 ## ParAtt ~~ ## PeerAtt 0.537 0.103 5.215 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .SelfEst 0.808 0.096 8.456 0.000 ## .ProSoc 0.657 0.078 8.456 0.000 ## .Aggr 0.789 0.093 8.456 0.000 ## .Emp 0.779 0.092 8.456 0.000 ## ParAtt 1.277 0.151 8.456 0.000 ## PeerAtt 0.963 0.114 8.456 0.000 CFI is acceptable, RMSEA is not. 11.0.4 Question 3 Considering the parameter estimates, what can you say about the research questions? Click for explanation The researcher expects that having good relationships with peers will increase prosocial behavior and decrease aggressive behavior, and that this is probably mediated through empathy (since people who experience empathy are likely to want to decrease distress in others), while the relationships with parents are expected to have a more direct effect on self-esteem. Generally seems to be the case – Paratt has a significant direct effect, and ParAtt seems to have a significant effect on empathy. Need to look further at indirect effects and total effects for details. 11.0.5 Estimating indirect effects Remember that an indirect effect is the product of several chained direct effects. Therefore, to obtain an indirect effect, you can multiply the two (or more) direct effects it consists of. Based on this knowledge - and you previous experience labelling parameters - the way to estimate indirect effects may be obvious: You label the direct effects You multiply the labels There is a tutorial on this on the lavaan website: http://lavaan.ugent.be/tutorial/mediation.html Additionally, a total effect is the sum of all direct and indirect effects that connect one predictor and one outcome. So, for example, in this week’s model, two indirect effects link Empathy and Self-esteem (through prosocial and aggression). The total effect of empathy on self-esteem is therefore the sum of these two indirect effects (and no direct effect). 11.0.6 Question 4 Estimate the indirect effects of Emp on SelfEst, mediated through ProSoc and Aggr. Also estimate the total effect. Note: A new parameter is defined in lavaan using the := operator. Click for explanation mediation_model &lt;- &quot;SelfEst ~ bse_pro * ProSoc + bse_agg * Aggr + ParAtt + PeerAtt ProSoc ~ bpro_emp * Emp Aggr ~ bagg_emp * Emp Emp ~ ParAtt + PeerAtt ProSoc ~~ Aggr ParAtt ~~ PeerAtt ind_pro := bse_pro * bpro_emp ind_agg := bse_agg * bagg_emp total := ind_pro + ind_agg&quot; fit_mediation &lt;- sem(mediation_model, data = data) summary(fit_mediation, fit.measures = TRUE) ## lavaan 0.6-5 ended normally after 18 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 16 ## ## Number of observations 143 ## ## Model Test User Model: ## ## Test statistic 12.609 ## Degrees of freedom 5 ## P-value (Chi-square) 0.027 ## ## Model Test Baseline Model: ## ## Test statistic 174.959 ## Degrees of freedom 15 ## P-value 0.000 ## ## User Model versus Baseline Model: ## ## Comparative Fit Index (CFI) 0.952 ## Tucker-Lewis Index (TLI) 0.857 ## ## Loglikelihood and Information Criteria: ## ## Loglikelihood user model (H0) -1131.703 ## Loglikelihood unrestricted model (H1) -1125.399 ## ## Akaike (AIC) 2295.407 ## Bayesian (BIC) 2342.812 ## Sample-size adjusted Bayesian (BIC) 2292.185 ## ## Root Mean Square Error of Approximation: ## ## RMSEA 0.103 ## 90 Percent confidence interval - lower 0.032 ## 90 Percent confidence interval - upper 0.176 ## P-value RMSEA &lt;= 0.05 0.093 ## ## Standardized Root Mean Square Residual: ## ## SRMR 0.059 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## SelfEst ~ ## ProSoc (bs_p) 0.312 0.084 3.721 0.000 ## Aggr (bs_g) 0.159 0.083 1.915 0.056 ## ParAtt 0.240 0.076 3.153 0.002 ## PeerAtt 0.083 0.089 0.935 0.350 ## ProSoc ~ ## Emp (bpr_) 0.520 0.071 7.285 0.000 ## Aggr ~ ## Emp (bgg_) -0.354 0.078 -4.528 0.000 ## Emp ~ ## ParAtt 0.078 0.075 1.045 0.296 ## PeerAtt 0.306 0.086 3.557 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## .ProSoc ~~ ## .Aggr -0.099 0.061 -1.621 0.105 ## ParAtt ~~ ## PeerAtt 0.537 0.103 5.215 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .SelfEst 0.808 0.096 8.456 0.000 ## .ProSoc 0.657 0.078 8.456 0.000 ## .Aggr 0.789 0.093 8.456 0.000 ## .Emp 0.779 0.092 8.456 0.000 ## ParAtt 1.277 0.151 8.456 0.000 ## PeerAtt 0.963 0.114 8.456 0.000 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ## ind_pro 0.162 0.049 3.314 0.001 ## ind_agg -0.056 0.032 -1.764 0.078 ## total 0.106 0.051 2.066 0.039 11.0.7 Question 5 Estimate all indirect effects and the total effects of Parental Attachment and Peer Attachment on Self-esteem. Click for explanation mediation_model &lt;- &quot;SelfEst ~ bse_pro * ProSoc + bse_agg * Aggr + bse_par * ParAtt + bse_peer * PeerAtt ProSoc ~ bpro_emp * Emp Aggr ~ bagg_emp * Emp Emp ~ bemp_par * ParAtt + bemp_peer * PeerAtt ProSoc ~~ Aggr ParAtt ~~ PeerAtt ind_par_emp_pro := bse_pro * bpro_emp * bemp_par ind_peer_emp_pro := bse_pro * bpro_emp * bemp_peer ind_par_emp_agg := bse_agg * bagg_emp * bemp_par ind_peer_emp_agg := bse_agg * bagg_emp * bemp_peer total_par := bse_par + ind_par_emp_pro + ind_par_emp_agg total_peer := bse_peer + ind_peer_emp_pro + ind_peer_emp_agg&quot; fit_mediation &lt;- sem(mediation_model, data = data) summary(fit_mediation) ## lavaan 0.6-5 ended normally after 18 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 16 ## ## Number of observations 143 ## ## Model Test User Model: ## ## Test statistic 12.609 ## Degrees of freedom 5 ## P-value (Chi-square) 0.027 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## SelfEst ~ ## PrS (bse_pro) 0.312 0.084 3.721 0.000 ## Agg (bs_g) 0.159 0.083 1.915 0.056 ## PrA (bse_par) 0.240 0.076 3.153 0.002 ## PrA (bse_per) 0.083 0.089 0.935 0.350 ## ProSoc ~ ## Emp (bpr_) 0.520 0.071 7.285 0.000 ## Aggr ~ ## Emp (bgg_) -0.354 0.078 -4.528 0.000 ## Emp ~ ## PrA (bemp_par) 0.078 0.075 1.045 0.296 ## PrA (bemp_per) 0.306 0.086 3.557 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## .ProSoc ~~ ## .Aggr -0.099 0.061 -1.621 0.105 ## ParAtt ~~ ## PeerAtt 0.537 0.103 5.215 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .SelfEst 0.808 0.096 8.456 0.000 ## .ProSoc 0.657 0.078 8.456 0.000 ## .Aggr 0.789 0.093 8.456 0.000 ## .Emp 0.779 0.092 8.456 0.000 ## ParAtt 1.277 0.151 8.456 0.000 ## PeerAtt 0.963 0.114 8.456 0.000 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ## ind_par_emp_pr 0.013 0.013 0.997 0.319 ## ind_peer_mp_pr 0.050 0.020 2.425 0.015 ## ind_par_emp_gg -0.004 0.005 -0.899 0.368 ## ind_peer_mp_gg -0.017 0.011 -1.580 0.114 ## total_par 0.248 0.076 3.247 0.001 ## total_peer 0.115 0.088 1.305 0.192 11.0.8 Question 6 To compare the total effect of parental attachment versus peer attachment on self esteem, should you use the standardized or unstandardized parameters? Obtain the appropriate output, and draw a conclusion. Click for explanation You should use the standardized results: summary(fit_mediation, fit.measures = TRUE, standardize = TRUE) ## lavaan 0.6-5 ended normally after 18 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of free parameters 16 ## ## Number of observations 143 ## ## Model Test User Model: ## ## Test statistic 12.609 ## Degrees of freedom 5 ## P-value (Chi-square) 0.027 ## ## Model Test Baseline Model: ## ## Test statistic 174.959 ## Degrees of freedom 15 ## P-value 0.000 ## ## User Model versus Baseline Model: ## ## Comparative Fit Index (CFI) 0.952 ## Tucker-Lewis Index (TLI) 0.857 ## ## Loglikelihood and Information Criteria: ## ## Loglikelihood user model (H0) -1131.703 ## Loglikelihood unrestricted model (H1) -1125.399 ## ## Akaike (AIC) 2295.407 ## Bayesian (BIC) 2342.812 ## Sample-size adjusted Bayesian (BIC) 2292.185 ## ## Root Mean Square Error of Approximation: ## ## RMSEA 0.103 ## 90 Percent confidence interval - lower 0.032 ## 90 Percent confidence interval - upper 0.176 ## P-value RMSEA &lt;= 0.05 0.093 ## ## Standardized Root Mean Square Residual: ## ## SRMR 0.059 ## ## Parameter Estimates: ## ## Information Expected ## Information saturated (h1) model Structured ## Standard errors Standard ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## SelfEst ~ ## PrS (bse_pro) 0.312 0.084 3.721 0.000 0.312 0.295 ## Agg (bs_g) 0.159 0.083 1.915 0.056 0.159 0.150 ## PrA (bse_par) 0.240 0.076 3.153 0.002 0.240 0.269 ## PrA (bse_per) 0.083 0.089 0.935 0.350 0.083 0.081 ## ProSoc ~ ## Emp (bpr_) 0.520 0.071 7.285 0.000 0.520 0.520 ## Aggr ~ ## Emp (bgg_) -0.354 0.078 -4.528 0.000 -0.354 -0.354 ## Emp ~ ## PrA (bemp_par) 0.078 0.075 1.045 0.296 0.078 0.093 ## PrA (bemp_per) 0.306 0.086 3.557 0.000 0.306 0.316 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .ProSoc ~~ ## .Aggr -0.099 0.061 -1.621 0.105 -0.099 -0.137 ## ParAtt ~~ ## PeerAtt 0.537 0.103 5.215 0.000 0.537 0.485 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## .SelfEst 0.808 0.096 8.456 0.000 0.808 0.797 ## .ProSoc 0.657 0.078 8.456 0.000 0.657 0.729 ## .Aggr 0.789 0.093 8.456 0.000 0.789 0.875 ## .Emp 0.779 0.092 8.456 0.000 0.779 0.863 ## ParAtt 1.277 0.151 8.456 0.000 1.277 1.000 ## PeerAtt 0.963 0.114 8.456 0.000 0.963 1.000 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) Std.lv Std.all ## ind_par_emp_pr 0.013 0.013 0.997 0.319 0.013 0.014 ## ind_peer_mp_pr 0.050 0.020 2.425 0.015 0.050 0.048 ## ind_par_emp_gg -0.004 0.005 -0.899 0.368 -0.004 -0.005 ## ind_peer_mp_gg -0.017 0.011 -1.580 0.114 -0.017 -0.017 ## total_par 0.248 0.076 3.247 0.001 0.248 0.279 ## total_peer 0.115 0.088 1.305 0.192 0.115 0.112 11.0.9 Difference between parameters To test the difference between parameters, you can constrain them to be equal and do a chi-square difference test to compare the constrained and unconstrained models. However, you can also calculate the difference between parameters, and test if it’s significant: &quot;dif_par_peer := total_par - total_peer&quot; 11.0.10 Bootstrapping You may have learned before that the sampling distribution of indirect effects is not normal. Consequently, you cannot use parameteric p-values to determine the significance of indirect effects because they are biased. If you want to know whether the indirect effects are significant, you can bootstrap them to obtain a 95% confidence interval. Bootstrapping means that lavaan will draw 1000 samples from the data and estimate the model on each sample. There will thus be 1000 estimates for every parameter. The lower and upper bounds of a 95% confidence interval are determined by taking the 2.5% and 97.5% quantiles of the 1000 samples for each parameter. The confidence interval is interpreted the same as a normal confidence interval: If zero lies inside the interval (e.g., lower bound is -.4 and upper bound is .9), we conclude that the parameter is not significantly different from zero, but if zero does not lie in this interval (e.g., lower bound is .4 and upper bound is 1.3), we can say the parameter differs from zero (at an alpha of .05 since we are considering a 95% confidence interval). We will get these intervals for all the parameters in the model, but we are specifically interested in the intervals for the indirect effects, because we want to know if they differ from zero (i.e., whether there is a mediated effect). In lavaan, bootstrap standard errors are requested by specifying se = “bootstrap” in the fitting function, and specifying the number of bootstrap samples as bootstrap = 1000. First, just get your code running by specifying a low number, like 100 or even 10. Note: To draw reliable conclusions from the results, you should always use 1000+ bootstrap samples - but it can take a long time. fit_mediation &lt;- sem(mediation_model, data = data, se = &quot;bootstrap&quot;, bootstrap = 100) To obtain the confidence intervals for your model, use the following syntax: parameterestimates(fit_mediation, boot.ci.type = &quot;bca.simple&quot;, standardized = TRUE) 11.0.11 Question 7 What do you conclude about the indirect and total effects of Parental attachment and Peer attachment on Self-esteem? Report your conclusions as you would report them in a paper (in words and statistics). "]
]
