[
["getting-your-data-into-r.html", "Chapter 2 Getting your data into R", " Chapter 2 Getting your data into R This optional chapter will tell you about how you can import data in RStudio. We will also show you a few commands to manipulate data directly in R. "],
["using-r-projects.html", "2.1 Using R projects", " 2.1 Using R projects One advantage of using an R project is that the project directory is automatically set as the working directory. Just copy your data file to the folder that contains the “.Rproj” file, and you will be able to load files by name. "],
["importing-excel-files.html", "2.2 Importing Excel Files", " 2.2 Importing Excel Files One way to get Excel files directly into R is by using the readxl package. Install the package, and try using the read_excel() function to load the data, and assign it to an object called df: # Run this only once, to download and install the package: install.packages(&quot;readxl&quot;) # Load the package: library(readxl) # Read an Excel file into &#39;df&#39;: df &lt;- read_excel(&quot;your_file.xlsx&quot;, sheet = 1) 2.2.1 Inspect the data R does not work with a single spreadsheet (SPSS or Excel). Instead, it can keep many objects in memory. The object df is a data.frame; an object that behaves similar to a spreadsheet. To see a description of the object, look at the Environment tab in the top right of Rstudio, and click the arrow next to df. As you can see, the on the top-right pane Environment, your file is now listed as a data set in your RStudio environment. You can make a quick copy of this data set by assigning the df object to a new object. This way, you can edit one, and leave the other unchanged. Assign the object df to a new object called df_backup: df_backup &lt;- df You can also have a look at the contents of df by clicking the object in the Environment panel, or running the command head(df). "],
["importing-spss-files.html", "2.3 Importing SPSS Files", " 2.3 Importing SPSS Files SPSS files can be loaded using the foreign package. All SPSS files for this course are available for download here. # Install the package, run this only once install.packages(&quot;foreign&quot;) # Load the `foreign` library library(foreign) # Read the SPSS data df &lt;- read.spss(&quot;sesam2.sav&quot;, to.data.frame = TRUE) "],
["data-manipulation-optional.html", "2.4 Data manipulation (optional)", " 2.4 Data manipulation (optional) Now that we have the Meta-Analysis data in RStudio, let’s do a few manipulations with the data. These functions might come in handy when were conducting analyses later on. Going back to the output of the str() function, we see that this also gives us details on the type of column data we have stored in our data. There a different abbreviations signifying different types of data. Abbreviation Type Description num Numerical This is all data stored as numbers (e.g. 1.02) chr Character This is all data stored as words log Logical These are variables which are binary, meaning that they signify that a condition is either TRUE or FALSE factor Factor Factors are stored as numbers, with each number signifying a different level of a variable. A possible factor of a variable might be 1 = low, 2 = medium, 3 = high 2.4.1 Converting to factors Let’s look at the variable df$VIEWCAT. This is a categorical variable, coded as a numerical one. We can have a look at this variable by typing the name of our dataset, then adding the selector $ and then adding the variable we want to have a look at. This variable is currently a numeric vector. We want it to be a factor: That’s a categorical variable. To convert this to a factor variable now, we use the factor() function. df$VIEWCAT &lt;- factor(df$VIEWCAT) We now see that the variable has been converted to a factor with the levels “1”, “2”, “3”, and “4”. We can assign different value labels as follows: df$VIEWCAT &lt;- factor(df$VIEWCAT, labels = c(&quot;Rarely&quot;, &quot;Sometimes&quot;, &quot;Regularly&quot;, &quot;Often&quot;)) 2.4.2 Selecting specific cases It may often come in handy to select certain cases for further analyses, or to exclude some studies in further analyses (e.g., if they are outliers). To do this, we can use the [] operator to index our data. Let’s say we want to get only the first 5 cases. We can select them like so: df[1:5, ] Or let’s say we only want the children younger than 36 months in the dataset. In this case, we can use boolean indexing: We create a TRUE / FALSE statement, and select the cases that are TRUE: df[df$AGE &lt; 36, ] Note that this approach can be used for any other type of data and variable. We can also use it to e.g., only select studies where VIEWCAT was equal to “Often” “typical”: df[df$VIEWCAT == &quot;Often&quot;, ] 2.4.3 Changing cell values Sometimes, even when preparing your data in EXCEL, you might want to change values in RStudio once you have imported your data. To do this, we have to select a cell in our data frame in RStudio. This can be done by adding [x,y] to our dataset name, where x signifies the number of the row we want to select, and y signifies the number of the column. To see how this works, let’s select a variable using this command first: df[8,1] ## [1] 8 We now see the 8th study in our dataframe, and the value of this study for Column 1 (participant ID) is displayed. Let’s say we had a typo in this name and want to have it changed. In this case, we have to give this exact cell a new value. df[8,1] &lt;- 1001 Let’s check if the value has changed. df[8,1] ## [1] 1001 You can also use this function to change any other type of data, including numericals and logicals. Only for characters, you have to put the values you want to insert in \"\". "]
]
